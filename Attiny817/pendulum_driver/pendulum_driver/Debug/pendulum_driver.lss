
pendulum_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000005d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e8  00803e00  00803e00  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00000648  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e9a  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002279  00000000  00000000  00005832  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001732  00000000  00000000  00007aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  000091e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022b1  00000000  00000000  00009820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000768  00000000  00000000  0000bad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000c239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	26 c2       	rjmp	.+1100   	; 0x45e <__vector_8>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__vector_10>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	46 c1       	rjmp	.+652    	; 0x2a8 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	3b c2       	rjmp	.+1142   	; 0x4a2 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	53 c1       	rjmp	.+678    	; 0x2d6 <__vector_23>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e4 e6       	ldi	r30, 0x64	; 100
  48:	f5 e0       	ldi	r31, 0x05	; 5
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a8 3e       	cpi	r26, 0xE8	; 232
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	4b d0       	rcall	.+150    	; 0xfe <main>
  68:	7b c2       	rjmp	.+1270   	; 0x560 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  6c:	e2 d1       	rcall	.+964    	; 0x432 <system_init>
  6e:	08 95       	ret

00000070 <ADC_setup>:
	I2C_WriteRegister(MMA8451_ADDR, CTRL_REG1, 0x3D);				// ODR = 1.56Hz, Reduced noise, Active mode
	//
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG3, 0x00);				// Push-pull, active low interrupt
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG4, 0x01);				// Enable DRDY interrupt
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG5, 0x01);				// DRDY interrupt routed to INT1 - PTA14
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG1, 0x0D);				// ODR = 400 Hz, Reduced noise, Active mode 
  70:	e0 ea       	ldi	r30, 0xA0	; 160
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	80 81       	ld	r24, Z
  76:	83 60       	ori	r24, 0x03	; 3
  78:	80 83       	st	Z, r24
  7a:	81 81       	ldd	r24, Z+1	; 0x01
  7c:	81 60       	ori	r24, 0x01	; 1
  7e:	81 83       	std	Z+1, r24	; 0x01
  80:	a0 e8       	ldi	r26, 0x80	; 128
  82:	b6 e0       	ldi	r27, 0x06	; 6
  84:	81 e4       	ldi	r24, 0x41	; 65
  86:	8c 93       	st	X, r24
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	11 96       	adiw	r26, 0x01	; 1
  8c:	8c 93       	st	X, r24
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__RODATA_PM_OFFSET__+0x7f8402>
  94:	80 81       	ld	r24, Z
  96:	80 63       	ori	r24, 0x30	; 48
  98:	80 83       	st	Z, r24
  9a:	81 81       	ldd	r24, Z+1	; 0x01
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	81 83       	std	Z+1, r24	; 0x01
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	80 81       	ld	r24, Z
  a6:	80 83       	st	Z, r24
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	80 83       	st	Z, r24
  ae:	82 81       	ldd	r24, Z+2	; 0x02
  b0:	83 65       	ori	r24, 0x53	; 83
  b2:	82 83       	std	Z+2, r24	; 0x02
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	86 8b       	std	Z+22, r24	; 0x16
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	86 83       	std	Z+6, r24	; 0x06
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <TCA_setup>:
}
//

void TCA_setup(void) {
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_ENABLE_bm | TCA_SINGLE_CLKSEL_DIV4_gc);
  c4:	e0 e0       	ldi	r30, 0x00	; 0
  c6:	fa e0       	ldi	r31, 0x0A	; 10
  c8:	80 81       	ld	r24, Z
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_FRQ_gc | TCA_SINGLE_CMP0EN_bm;
  ce:	81 81       	ldd	r24, Z+1	; 0x01
  d0:	81 61       	ori	r24, 0x11	; 17
  d2:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.PER = TCA0_PERIOD;
  d4:	87 e8       	ldi	r24, 0x87	; 135
  d6:	93 e1       	ldi	r25, 0x13	; 19
  d8:	86 a3       	std	Z+38, r24	; 0x26
  da:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
  dc:	82 85       	ldd	r24, Z+10	; 0x0a
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	82 87       	std	Z+10, r24	; 0x0a
  e2:	08 95       	ret

000000e4 <TCB_setup>:
}
//
void TCB_setup(void) {
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_CLKTCA_gc;
  e4:	e0 e4       	ldi	r30, 0x40	; 64
  e6:	fa e0       	ldi	r31, 0x0A	; 10
  e8:	80 81       	ld	r24, Z
  ea:	85 60       	ori	r24, 0x05	; 5
  ec:	80 83       	st	Z, r24
	TCB0.INTCTRL |= TCB_CAPT_bm;
  ee:	85 81       	ldd	r24, Z+5	; 0x05
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	85 83       	std	Z+5, r24	; 0x05
	TCB0.CCMP = F_TCA / F_CALC;
  f4:	88 ea       	ldi	r24, 0xA8	; 168
  f6:	91 e6       	ldi	r25, 0x61	; 97
  f8:	84 87       	std	Z+12, r24	; 0x0c
  fa:	95 87       	std	Z+13, r25	; 0x0d
  fc:	08 95       	ret

000000fe <main>:
PB2 not working?
Timing indicator = PB3
*/
int main(void) {
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  fe:	b6 df       	rcall	.-148    	; 0x6c <atmel_start_init>
	// 
	PORTB.DIRSET |= (PIN5_bm | PIN3_bm | PIN1_bm | PIN0_bm);
 100:	e0 e2       	ldi	r30, 0x20	; 32
 102:	f4 e0       	ldi	r31, 0x04	; 4
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	8b 62       	ori	r24, 0x2B	; 43
 108:	81 83       	std	Z+1, r24	; 0x01
	// 
	// Setup buttons as inputs to change position set point
	// Timer 1 to frequency generation mode
	TCA_setup();	
 10a:	dc df       	rcall	.-72     	; 0xc4 <TCA_setup>
	// Timer 2 to trigger position calculation every x milliseconds
	TCB_setup();
 10c:	eb df       	rcall	.-42     	; 0xe4 <TCB_setup>
	// ADC for angle position detection
	ADC_setup();
 10e:	b0 df       	rcall	.-160    	; 0x70 <ADC_setup>
	sei();
 110:	78 94       	sei
	speed_command = 4500;
 112:	84 e9       	ldi	r24, 0x94	; 148
 114:	91 e1       	ldi	r25, 0x11	; 17
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <speed_command>
 11e:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <speed_command+0x1>
 122:	a0 93 0e 3e 	sts	0x3E0E, r26	; 0x803e0e <speed_command+0x2>
 126:	b0 93 0f 3e 	sts	0x3E0F, r27	; 0x803e0f <speed_command+0x3>
	while (1) {
		if (loop) {
 12a:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <loop>
 12e:	90 91 15 3e 	lds	r25, 0x3E15	; 0x803e15 <loop+0x1>
 132:	89 2b       	or	r24, r25
 134:	d1 f3       	breq	.-12     	; 0x12a <main+0x2c>
			PORTB.OUTSET = PIN5_bm;
 136:	80 e2       	ldi	r24, 0x20	; 32
 138:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
			// get_speed_command();
			
			if (loop_counter < 100) direction = 1;
 13c:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 140:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 144:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 148:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
 14c:	84 36       	cpi	r24, 0x64	; 100
 14e:	91 05       	cpc	r25, r1
 150:	a1 05       	cpc	r26, r1
 152:	b1 05       	cpc	r27, r1
 154:	64 f4       	brge	.+24     	; 0x16e <main+0x70>
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	40 93 b8 3f 	sts	0x3FB8, r20	; 0x803fb8 <direction>
 162:	50 93 b9 3f 	sts	0x3FB9, r21	; 0x803fb9 <direction+0x1>
 166:	60 93 ba 3f 	sts	0x3FBA, r22	; 0x803fba <direction+0x2>
 16a:	70 93 bb 3f 	sts	0x3FBB, r23	; 0x803fbb <direction+0x3>
			if (loop_counter > 100) direction = 0;
 16e:	85 36       	cpi	r24, 0x65	; 101
 170:	91 05       	cpc	r25, r1
 172:	a1 05       	cpc	r26, r1
 174:	b1 05       	cpc	r27, r1
 176:	44 f0       	brlt	.+16     	; 0x188 <main+0x8a>
 178:	10 92 b8 3f 	sts	0x3FB8, r1	; 0x803fb8 <direction>
 17c:	10 92 b9 3f 	sts	0x3FB9, r1	; 0x803fb9 <direction+0x1>
 180:	10 92 ba 3f 	sts	0x3FBA, r1	; 0x803fba <direction+0x2>
 184:	10 92 bb 3f 	sts	0x3FBB, r1	; 0x803fbb <direction+0x3>
			if (loop_counter == 200) loop_counter = 0;
 188:	88 3c       	cpi	r24, 0xC8	; 200
 18a:	91 05       	cpc	r25, r1
 18c:	a1 05       	cpc	r26, r1
 18e:	b1 05       	cpc	r27, r1
 190:	41 f4       	brne	.+16     	; 0x1a2 <main+0xa4>
 192:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
 196:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 19a:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 19e:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
			loop_counter++;
 1a2:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 1ae:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
 1b8:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
 1bc:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 1c0:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 1c4:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
			
			PORTB.OUTCLR = PIN5_bm;
 1c8:	80 e2       	ldi	r24, 0x20	; 32
 1ca:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
			loop = 0;
 1ce:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <loop>
 1d2:	10 92 15 3e 	sts	0x3E15, r1	; 0x803e15 <loop+0x1>
 1d6:	a9 cf       	rjmp	.-174    	; 0x12a <main+0x2c>

000001d8 <__vector_10>:
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_CLKTCA_gc;
	TCB0.INTCTRL |= TCB_CAPT_bm;
	TCB0.CCMP = F_TCA / F_CALC;
}
//
ISR(TCA0_CMP0_vect) {
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	ef 93       	push	r30
 1f4:	ff 93       	push	r31
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
 1f6:	e0 e0       	ldi	r30, 0x00	; 0
 1f8:	fa e0       	ldi	r31, 0x0A	; 10
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	83 87       	std	Z+11, r24	; 0x0b

	TCA0.SINGLE.CMP0 = speed_command;
 1fe:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <speed_command>
 202:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <speed_command+0x1>
 206:	80 a7       	std	Z+40, r24	; 0x28
 208:	91 a7       	std	Z+41, r25	; 0x29
	if (direction != prev_dir) {
 20a:	40 91 b8 3f 	lds	r20, 0x3FB8	; 0x803fb8 <direction>
 20e:	50 91 b9 3f 	lds	r21, 0x3FB9	; 0x803fb9 <direction+0x1>
 212:	60 91 ba 3f 	lds	r22, 0x3FBA	; 0x803fba <direction+0x2>
 216:	70 91 bb 3f 	lds	r23, 0x3FBB	; 0x803fbb <direction+0x3>
 21a:	80 91 1a 3e 	lds	r24, 0x3E1A	; 0x803e1a <prev_dir>
 21e:	90 91 1b 3e 	lds	r25, 0x3E1B	; 0x803e1b <prev_dir+0x1>
 222:	a0 91 1c 3e 	lds	r26, 0x3E1C	; 0x803e1c <prev_dir+0x2>
 226:	b0 91 1d 3e 	lds	r27, 0x3E1D	; 0x803e1d <prev_dir+0x3>
 22a:	48 17       	cp	r20, r24
 22c:	59 07       	cpc	r21, r25
 22e:	6a 07       	cpc	r22, r26
 230:	7b 07       	cpc	r23, r27
 232:	d9 f0       	breq	.+54     	; 0x26a <__DATA_REGION_LENGTH__+0x6a>
		// Stop PWM
		TCA0.SINGLE.CTRLA &= ~TCA_SINGLE_ENABLE_bm;
 234:	80 81       	ld	r24, Z
 236:	8e 7f       	andi	r24, 0xFE	; 254
 238:	80 83       	st	Z, r24
		// Change PB01 to value of direction
		if (direction) PORTB.OUTSET = PIN1_bm;
 23a:	80 91 b8 3f 	lds	r24, 0x3FB8	; 0x803fb8 <direction>
 23e:	90 91 b9 3f 	lds	r25, 0x3FB9	; 0x803fb9 <direction+0x1>
 242:	a0 91 ba 3f 	lds	r26, 0x3FBA	; 0x803fba <direction+0x2>
 246:	b0 91 bb 3f 	lds	r27, 0x3FBB	; 0x803fbb <direction+0x3>
 24a:	89 2b       	or	r24, r25
 24c:	8a 2b       	or	r24, r26
 24e:	8b 2b       	or	r24, r27
 250:	21 f0       	breq	.+8      	; 0x25a <__DATA_REGION_LENGTH__+0x5a>
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
 258:	03 c0       	rjmp	.+6      	; 0x260 <__DATA_REGION_LENGTH__+0x60>
		else PORTB.OUTCLR = PIN1_bm;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
		// Restart PWM
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 260:	e0 e0       	ldi	r30, 0x00	; 0
 262:	fa e0       	ldi	r31, 0x0A	; 10
 264:	80 81       	ld	r24, Z
 266:	81 60       	ori	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
	}
	prev_dir = direction;
 26a:	80 91 b8 3f 	lds	r24, 0x3FB8	; 0x803fb8 <direction>
 26e:	90 91 b9 3f 	lds	r25, 0x3FB9	; 0x803fb9 <direction+0x1>
 272:	a0 91 ba 3f 	lds	r26, 0x3FBA	; 0x803fba <direction+0x2>
 276:	b0 91 bb 3f 	lds	r27, 0x3FBB	; 0x803fbb <direction+0x3>
 27a:	80 93 1a 3e 	sts	0x3E1A, r24	; 0x803e1a <prev_dir>
 27e:	90 93 1b 3e 	sts	0x3E1B, r25	; 0x803e1b <prev_dir+0x1>
 282:	a0 93 1c 3e 	sts	0x3E1C, r26	; 0x803e1c <prev_dir+0x2>
 286:	b0 93 1d 3e 	sts	0x3E1D, r27	; 0x803e1d <prev_dir+0x3>
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	5f 91       	pop	r21
 29c:	4f 91       	pop	r20
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_13>:
//
ISR(TCB0_INT_vect) {
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
	TCB0.INTFLAGS = TCB_CAPT_bm;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__RODATA_PM_OFFSET__+0x7f8a46>
	loop = 1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <loop>
 2c4:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <loop+0x1>
}
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_23>:
//
ISR(USART0_DRE_vect) {
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	PORTB.OUTSET = PIN5_bm;
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>

	usart_idx++;
 2fa:	40 91 c4 3f 	lds	r20, 0x3FC4	; 0x803fc4 <usart_idx>
 2fe:	50 91 c5 3f 	lds	r21, 0x3FC5	; 0x803fc5 <usart_idx+0x1>
 302:	60 91 c6 3f 	lds	r22, 0x3FC6	; 0x803fc6 <usart_idx+0x2>
 306:	70 91 c7 3f 	lds	r23, 0x3FC7	; 0x803fc7 <usart_idx+0x3>
 30a:	4f 5f       	subi	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	6f 4f       	sbci	r22, 0xFF	; 255
 310:	7f 4f       	sbci	r23, 0xFF	; 255
 312:	40 93 c4 3f 	sts	0x3FC4, r20	; 0x803fc4 <usart_idx>
 316:	50 93 c5 3f 	sts	0x3FC5, r21	; 0x803fc5 <usart_idx+0x1>
 31a:	60 93 c6 3f 	sts	0x3FC6, r22	; 0x803fc6 <usart_idx+0x2>
 31e:	70 93 c7 3f 	sts	0x3FC7, r23	; 0x803fc7 <usart_idx+0x3>
	if (usart_idx == usart_send_length) USART0.CTRLA &= ~USART_DREIE_bm;
 322:	80 91 bc 3f 	lds	r24, 0x3FBC	; 0x803fbc <usart_send_length>
 326:	90 91 bd 3f 	lds	r25, 0x3FBD	; 0x803fbd <usart_send_length+0x1>
 32a:	a0 91 be 3f 	lds	r26, 0x3FBE	; 0x803fbe <usart_send_length+0x2>
 32e:	b0 91 bf 3f 	lds	r27, 0x3FBF	; 0x803fbf <usart_send_length+0x3>
 332:	48 17       	cp	r20, r24
 334:	59 07       	cpc	r21, r25
 336:	6a 07       	cpc	r22, r26
 338:	7b 07       	cpc	r23, r27
 33a:	29 f4       	brne	.+10     	; 0x346 <__vector_23+0x70>
 33c:	e0 e0       	ldi	r30, 0x00	; 0
 33e:	f8 e0       	ldi	r31, 0x08	; 8
 340:	85 81       	ldd	r24, Z+5	; 0x05
 342:	8f 7d       	andi	r24, 0xDF	; 223
 344:	85 83       	std	Z+5, r24	; 0x05
	while(!(USART0.STATUS & USART_DREIF_bm));
 346:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 34a:	85 ff       	sbrs	r24, 5
 34c:	fc cf       	rjmp	.-8      	; 0x346 <__vector_23+0x70>
	USART0.TXDATAL = usart_send_buffer[usart_idx];
 34e:	fa 01       	movw	r30, r20
 350:	ea 5e       	subi	r30, 0xEA	; 234
 352:	f1 4c       	sbci	r31, 0xC1	; 193
 354:	80 81       	ld	r24, Z
 356:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>

	PORTB.OUTCLR = PIN5_bm;
 35a:	80 e2       	ldi	r24, 0x20	; 32
 35c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret

00000382 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 382:	40 e1       	ldi	r20, 0x10	; 16
 384:	68 ed       	ldi	r22, 0xD8	; 216
 386:	81 e6       	ldi	r24, 0x61	; 97
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	5d d0       	rcall	.+186    	; 0x446 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret

00000390 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret

00000394 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 398:	e8 2f       	mov	r30, r24
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	e0 5f       	subi	r30, 0xF0	; 240
 39e:	fb 4f       	sbci	r31, 0xFB	; 251
 3a0:	90 81       	ld	r25, Z
 3a2:	98 60       	ori	r25, 0x08	; 8
 3a4:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	88 30       	cpi	r24, 0x08	; 8
 3aa:	b0 f3       	brcs	.-20     	; 0x398 <mcu_init+0x4>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3b0:	e8 2f       	mov	r30, r24
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	e0 5d       	subi	r30, 0xD0	; 208
 3b6:	fb 4f       	sbci	r31, 0xFB	; 251
 3b8:	90 81       	ld	r25, Z
 3ba:	98 60       	ori	r25, 0x08	; 8
 3bc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	88 30       	cpi	r24, 0x08	; 8
 3c2:	b0 f3       	brcs	.-20     	; 0x3b0 <mcu_init+0x1c>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3c8:	e8 2f       	mov	r30, r24
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e0 5b       	subi	r30, 0xB0	; 176
 3ce:	fb 4f       	sbci	r31, 0xFB	; 251
 3d0:	90 81       	ld	r25, Z
 3d2:	98 60       	ori	r25, 0x08	; 8
 3d4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	88 30       	cpi	r24, 0x08	; 8
 3da:	b0 f3       	brcs	.-20     	; 0x3c8 <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 3dc:	08 95       	ret

000003de <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 3de:	84 b1       	in	r24, 0x04	; 4
 3e0:	87 7f       	andi	r24, 0xF7	; 247
 3e2:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 3e4:	e3 e3       	ldi	r30, 0x33	; 51
 3e6:	f4 e0       	ldi	r31, 0x04	; 4
 3e8:	80 81       	ld	r24, Z
 3ea:	87 7f       	andi	r24, 0xF7	; 247
 3ec:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 3ee:	84 b1       	in	r24, 0x04	; 4
 3f0:	84 60       	ori	r24, 0x04	; 4
 3f2:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 3f4:	85 b1       	in	r24, 0x05	; 5
 3f6:	8b 7f       	andi	r24, 0xFB	; 251
 3f8:	85 b9       	out	0x05, r24	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 3fa:	a8 d0       	rcall	.+336    	; 0x54c <USART_0_init>
 3fc:	08 95       	ret

000003fe <PWM_0_initialization>:
}

void PWM_0_initialization(void)
{

	PWM_0_init();
 3fe:	27 d0       	rcall	.+78     	; 0x44e <PWM_0_init>
 400:	08 95       	ret

00000402 <TIMER_0_initialization>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 402:	a2 d0       	rcall	.+324    	; 0x548 <TIMER_0_init>
 404:	08 95       	ret

00000406 <SPI_0_initialization>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 406:	80 b1       	in	r24, 0x00	; 0
 408:	8b 7f       	andi	r24, 0xFB	; 251
 40a:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 40c:	e2 e1       	ldi	r30, 0x12	; 18
 40e:	f4 e0       	ldi	r31, 0x04	; 4
 410:	80 81       	ld	r24, Z
 412:	87 7f       	andi	r24, 0xF7	; 247
 414:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 416:	80 b1       	in	r24, 0x00	; 0
 418:	82 60       	ori	r24, 0x02	; 2
 41a:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 41c:	81 b1       	in	r24, 0x01	; 1
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 422:	80 b1       	in	r24, 0x00	; 0
 424:	88 60       	ori	r24, 0x08	; 8
 426:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 428:	81 b1       	in	r24, 0x01	; 1
 42a:	87 7f       	andi	r24, 0xF7	; 247
 42c:	81 b9       	out	0x01, r24	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
 42e:	2d d0       	rcall	.+90     	; 0x48a <SPI_0_init>
 430:	08 95       	ret

00000432 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 432:	b0 df       	rcall	.-160    	; 0x394 <mcu_init>

	CLKCTRL_init();
 434:	a6 df       	rcall	.-180    	; 0x382 <CLKCTRL_init>

	USART_0_initialization();
 436:	d3 df       	rcall	.-90     	; 0x3de <USART_0_initialization>

	PWM_0_initialization();
 438:	e2 df       	rcall	.-60     	; 0x3fe <PWM_0_initialization>

	TIMER_0_initialization();
 43a:	e3 df       	rcall	.-58     	; 0x402 <TIMER_0_initialization>

	SPI_0_initialization();
 43c:	e4 df       	rcall	.-56     	; 0x406 <SPI_0_initialization>

	CPUINT_init();
 43e:	a8 df       	rcall	.-176    	; 0x390 <CPUINT_init>

	SLPCTRL_init();
 440:	22 d0       	rcall	.+68     	; 0x486 <SLPCTRL_init>

	BOD_init();
 442:	9d df       	rcall	.-198    	; 0x37e <BOD_init>
 444:	08 95       	ret

00000446 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 446:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 448:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 44a:	40 83       	st	Z, r20
	ret                             // Return to caller
 44c:	08 95       	ret

0000044e <PWM_0_init>:
 *
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
 44e:	e0 e0       	ldi	r30, 0x00	; 0
 450:	fa e0       	ldi	r31, 0x0A	; 10
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	81 83       	std	Z+1, r24	; 0x01
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	80 83       	st	Z, r24
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 95       	ret

0000045e <__vector_8>:
}

ISR(TCA0_OVF_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
 470:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <callback_count.3348>
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <callback_count.3348>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
 47a:	8f 91       	pop	r24
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret

0000048a <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 48a:	e0 e2       	ldi	r30, 0x20	; 32
 48c:	f8 e0       	ldi	r31, 0x08	; 8
 48e:	81 e2       	ldi	r24, 0x21	; 33
 490:	80 83       	st	Z, r24
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	82 83       	std	Z+2, r24	; 0x02
 496:	e5 e0       	ldi	r30, 0x05	; 5
 498:	fe e3       	ldi	r31, 0x3E	; 62
 49a:	10 82       	st	Z, r1
 49c:	15 82       	std	Z+5, r1	; 0x05
 49e:	16 82       	std	Z+6, r1	; 0x06
 4a0:	08 95       	ret

000004a2 <__vector_21>:
}

ISR(SPI0_INT_vect)
{
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
 4c4:	e0 e2       	ldi	r30, 0x20	; 32
 4c6:	f8 e0       	ldi	r31, 0x08	; 8
 4c8:	94 81       	ldd	r25, Z+4	; 0x04
	uint8_t wdata = 0;

	SPI0.INTFLAGS = SPI_RXCIF_bm;
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	83 83       	std	Z+3, r24	; 0x03

	if (SPI_0_desc.type != SPI_WRITE) {
 4ce:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <SPI_0_desc+0x4>
 4d2:	82 30       	cpi	r24, 0x02	; 2
 4d4:	29 f0       	breq	.+10     	; 0x4e0 <__vector_21+0x3e>
		*SPI_0_desc.data = rdata;
 4d6:	e0 91 06 3e 	lds	r30, 0x3E06	; 0x803e06 <SPI_0_desc+0x1>
 4da:	f0 91 07 3e 	lds	r31, 0x3E07	; 0x803e07 <SPI_0_desc+0x2>
 4de:	90 83       	st	Z, r25
	}

	SPI_0_desc.data++;
 4e0:	e5 e0       	ldi	r30, 0x05	; 5
 4e2:	fe e3       	ldi	r31, 0x3E	; 62
 4e4:	a1 81       	ldd	r26, Z+1	; 0x01
 4e6:	b2 81       	ldd	r27, Z+2	; 0x02
 4e8:	9d 01       	movw	r18, r26
 4ea:	2f 5f       	subi	r18, 0xFF	; 255
 4ec:	3f 4f       	sbci	r19, 0xFF	; 255
 4ee:	21 83       	std	Z+1, r18	; 0x01
 4f0:	32 83       	std	Z+2, r19	; 0x02

	if (SPI_0_desc.type != SPI_READ)
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	19 f0       	breq	.+6      	; 0x4fc <__vector_21+0x5a>
		wdata = *SPI_0_desc.data;
 4f6:	11 96       	adiw	r26, 0x01	; 1
 4f8:	9c 91       	ld	r25, X
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <__vector_21+0x5c>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
	uint8_t wdata = 0;
 4fc:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 4fe:	e5 e0       	ldi	r30, 0x05	; 5
 500:	fe e3       	ldi	r31, 0x3E	; 62
 502:	83 81       	ldd	r24, Z+3	; 0x03
 504:	81 50       	subi	r24, 0x01	; 1
 506:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 508:	88 23       	and	r24, r24
 50a:	19 f0       	breq	.+6      	; 0x512 <__vector_21+0x70>
		// more data to send, send a byte
		SPI0.DATA = wdata;
 50c:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 510:	0a c0       	rjmp	.+20     	; 0x526 <__vector_21+0x84>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 512:	e5 e0       	ldi	r30, 0x05	; 5
 514:	fe e3       	ldi	r31, 0x3E	; 62
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 51a:	05 80       	ldd	r0, Z+5	; 0x05
 51c:	f6 81       	ldd	r31, Z+6	; 0x06
 51e:	e0 2d       	mov	r30, r0
 520:	30 97       	sbiw	r30, 0x00	; 0
 522:	09 f0       	breq	.+2      	; 0x526 <__vector_21+0x84>
			SPI_0_desc.cb();
 524:	09 95       	icall
		}
	}
}
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0f be       	out	0x3f, r0	; 63
 542:	0f 90       	pop	r0
 544:	1f 90       	pop	r1
 546:	18 95       	reti

00000548 <TIMER_0_init>:
	//		 | 0 << TCB_ENABLE_bp /* Enable: disabled */
	//		 | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret

0000054c <USART_0_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
 54c:	e0 e0       	ldi	r30, 0x00	; 0
 54e:	f8 e0       	ldi	r31, 0x08	; 8
 550:	8d e8       	ldi	r24, 0x8D	; 141
 552:	90 e2       	ldi	r25, 0x20	; 32
 554:	80 87       	std	Z+8, r24	; 0x08
 556:	91 87       	std	Z+9, r25	; 0x09
	//		 | USART_RS485_OFF_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
 558:	80 ec       	ldi	r24, 0xC0	; 192
 55a:	86 83       	std	Z+6, r24	; 0x06
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
