
pendulum_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001464  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00803e00  00803e00  000014d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c0a  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021a1  00000000  00000000  00006542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cf4  00000000  00000000  000086e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d08  00000000  00000000  0000a3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002399  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000196d  00000000  00000000  0000d479  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000320  00000000  00000000  0000ede6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	ff c7       	rjmp	.+4094   	; 0x1010 <__vector_8>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	e9 c3       	rjmp	.+2002   	; 0x7e8 <__vector_10>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	69 c4       	rjmp	.+2258   	; 0x8ee <__vector_13>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	39 c8       	rjmp	.-3982   	; 0xfffff09e <__eeprom_end+0xff7ef09e>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	87 c4       	rjmp	.+2318   	; 0x93e <__vector_23>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	cd bf       	out	0x3d, r28	; 61
      3c:	df e3       	ldi	r29, 0x3F	; 63
      3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
      40:	1e e3       	ldi	r17, 0x3E	; 62
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	be e3       	ldi	r27, 0x3E	; 62
      46:	e4 e6       	ldi	r30, 0x64	; 100
      48:	f4 e1       	ldi	r31, 0x14	; 20
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a0 30       	cpi	r26, 0x00	; 0
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	2e e3       	ldi	r18, 0x3E	; 62
      58:	a0 e0       	ldi	r26, 0x00	; 0
      5a:	be e3       	ldi	r27, 0x3E	; 62
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a2 36       	cpi	r26, 0x62	; 98
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	d6 d1       	rcall	.+940    	; 0x414 <main>
      68:	fb c9       	rjmp	.-3082   	; 0xfffff460 <__eeprom_end+0xff7ef460>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
	system_init();
      74:	a6 d7       	rcall	.+3916   	; 0xfc2 <system_init>
}
      76:	00 00       	nop
      78:	df 91       	pop	r29
      7a:	cf 91       	pop	r28
      7c:	08 95       	ret

0000007e <pid_Init>:
	//
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG3, 0x00);				// Push-pull, active low interrupt
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG4, 0x01);				// Enable DRDY interrupt
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG5, 0x01);				// DRDY interrupt routed to INT1 - PTA14
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG1, 0x0D);				// ODR = 400 Hz, Reduced noise, Active mode 
}
      7e:	cf 93       	push	r28
      80:	df 93       	push	r29
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
      86:	28 97       	sbiw	r28, 0x08	; 8
      88:	cd bf       	out	0x3d, r28	; 61
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	89 83       	std	Y+1, r24	; 0x01
      8e:	9a 83       	std	Y+2, r25	; 0x02
      90:	6b 83       	std	Y+3, r22	; 0x03
      92:	7c 83       	std	Y+4, r23	; 0x04
      94:	4d 83       	std	Y+5, r20	; 0x05
      96:	5e 83       	std	Y+6, r21	; 0x06
      98:	2f 83       	std	Y+7, r18	; 0x07
      9a:	38 87       	std	Y+8, r19	; 0x08
      9c:	8f 81       	ldd	r24, Y+7	; 0x07
      9e:	98 85       	ldd	r25, Y+8	; 0x08
      a0:	fc 01       	movw	r30, r24
      a2:	12 82       	std	Z+2, r1	; 0x02
      a4:	13 82       	std	Z+3, r1	; 0x03
      a6:	14 82       	std	Z+4, r1	; 0x04
      a8:	15 82       	std	Z+5, r1	; 0x05
      aa:	8f 81       	ldd	r24, Y+7	; 0x07
      ac:	98 85       	ldd	r25, Y+8	; 0x08
      ae:	fc 01       	movw	r30, r24
      b0:	10 82       	st	Z, r1
      b2:	11 82       	std	Z+1, r1	; 0x01
      b4:	8f 81       	ldd	r24, Y+7	; 0x07
      b6:	98 85       	ldd	r25, Y+8	; 0x08
      b8:	29 81       	ldd	r18, Y+1	; 0x01
      ba:	3a 81       	ldd	r19, Y+2	; 0x02
      bc:	fc 01       	movw	r30, r24
      be:	26 83       	std	Z+6, r18	; 0x06
      c0:	37 83       	std	Z+7, r19	; 0x07
      c2:	8f 81       	ldd	r24, Y+7	; 0x07
      c4:	98 85       	ldd	r25, Y+8	; 0x08
      c6:	2b 81       	ldd	r18, Y+3	; 0x03
      c8:	3c 81       	ldd	r19, Y+4	; 0x04
      ca:	fc 01       	movw	r30, r24
      cc:	20 87       	std	Z+8, r18	; 0x08
      ce:	31 87       	std	Z+9, r19	; 0x09
      d0:	8f 81       	ldd	r24, Y+7	; 0x07
      d2:	98 85       	ldd	r25, Y+8	; 0x08
      d4:	2d 81       	ldd	r18, Y+5	; 0x05
      d6:	3e 81       	ldd	r19, Y+6	; 0x06
      d8:	fc 01       	movw	r30, r24
      da:	22 87       	std	Z+10, r18	; 0x0a
      dc:	33 87       	std	Z+11, r19	; 0x0b
      de:	8f 81       	ldd	r24, Y+7	; 0x07
      e0:	98 85       	ldd	r25, Y+8	; 0x08
      e2:	fc 01       	movw	r30, r24
      e4:	86 81       	ldd	r24, Z+6	; 0x06
      e6:	97 81       	ldd	r25, Z+7	; 0x07
      e8:	9c 01       	movw	r18, r24
      ea:	2f 5f       	subi	r18, 0xFF	; 255
      ec:	3f 4f       	sbci	r19, 0xFF	; 255
      ee:	8f ef       	ldi	r24, 0xFF	; 255
      f0:	9f e7       	ldi	r25, 0x7F	; 127
      f2:	b9 01       	movw	r22, r18
      f4:	3a d9       	rcall	.-3468   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
      f6:	cb 01       	movw	r24, r22
      f8:	9c 01       	movw	r18, r24
      fa:	8f 81       	ldd	r24, Y+7	; 0x07
      fc:	98 85       	ldd	r25, Y+8	; 0x08
      fe:	fc 01       	movw	r30, r24
     100:	24 87       	std	Z+12, r18	; 0x0c
     102:	35 87       	std	Z+13, r19	; 0x0d
     104:	8f 81       	ldd	r24, Y+7	; 0x07
     106:	98 85       	ldd	r25, Y+8	; 0x08
     108:	fc 01       	movw	r30, r24
     10a:	80 85       	ldd	r24, Z+8	; 0x08
     10c:	91 85       	ldd	r25, Z+9	; 0x09
     10e:	01 96       	adiw	r24, 0x01	; 1
     110:	9c 01       	movw	r18, r24
     112:	99 0f       	add	r25, r25
     114:	44 0b       	sbc	r20, r20
     116:	55 0b       	sbc	r21, r21
     118:	8f ef       	ldi	r24, 0xFF	; 255
     11a:	9f ef       	ldi	r25, 0xFF	; 255
     11c:	af ef       	ldi	r26, 0xFF	; 255
     11e:	bf e3       	ldi	r27, 0x3F	; 63
     120:	bc 01       	movw	r22, r24
     122:	cd 01       	movw	r24, r26
     124:	57 d9       	rcall	.-3410   	; 0xfffff3d4 <__eeprom_end+0xff7ef3d4>
     126:	da 01       	movw	r26, r20
     128:	c9 01       	movw	r24, r18
     12a:	2f 81       	ldd	r18, Y+7	; 0x07
     12c:	38 85       	ldd	r19, Y+8	; 0x08
     12e:	f9 01       	movw	r30, r18
     130:	86 87       	std	Z+14, r24	; 0x0e
     132:	97 87       	std	Z+15, r25	; 0x0f
     134:	a0 8b       	std	Z+16, r26	; 0x10
     136:	b1 8b       	std	Z+17, r27	; 0x11
     138:	00 00       	nop
     13a:	28 96       	adiw	r28, 0x08	; 8
     13c:	cd bf       	out	0x3d, r28	; 61
     13e:	de bf       	out	0x3e, r29	; 62
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	08 95       	ret

00000146 <pid_Controller>:
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
     14e:	68 97       	sbiw	r28, 0x18	; 24
     150:	cd bf       	out	0x3d, r28	; 61
     152:	de bf       	out	0x3e, r29	; 62
     154:	8b 8b       	std	Y+19, r24	; 0x13
     156:	9c 8b       	std	Y+20, r25	; 0x14
     158:	6d 8b       	std	Y+21, r22	; 0x15
     15a:	7e 8b       	std	Y+22, r23	; 0x16
     15c:	4f 8b       	std	Y+23, r20	; 0x17
     15e:	58 8f       	std	Y+24, r21	; 0x18
     160:	2b 89       	ldd	r18, Y+19	; 0x13
     162:	3c 89       	ldd	r19, Y+20	; 0x14
     164:	8d 89       	ldd	r24, Y+21	; 0x15
     166:	9e 89       	ldd	r25, Y+22	; 0x16
     168:	a9 01       	movw	r20, r18
     16a:	48 1b       	sub	r20, r24
     16c:	59 0b       	sbc	r21, r25
     16e:	ca 01       	movw	r24, r20
     170:	89 83       	std	Y+1, r24	; 0x01
     172:	9a 83       	std	Y+2, r25	; 0x02
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	84 3b       	cpi	r24, 0xB4	; 180
     17a:	91 05       	cpc	r25, r1
     17c:	34 f0       	brlt	.+12     	; 0x18a <pid_Controller+0x44>
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	9a 81       	ldd	r25, Y+2	; 0x02
     182:	84 5b       	subi	r24, 0xB4	; 180
     184:	91 09       	sbc	r25, r1
     186:	89 83       	std	Y+1, r24	; 0x01
     188:	9a 83       	std	Y+2, r25	; 0x02
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	8c 34       	cpi	r24, 0x4C	; 76
     190:	9f 4f       	sbci	r25, 0xFF	; 255
     192:	34 f4       	brge	.+12     	; 0x1a0 <pid_Controller+0x5a>
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	8c 54       	subi	r24, 0x4C	; 76
     19a:	9f 4f       	sbci	r25, 0xFF	; 255
     19c:	89 83       	std	Y+1, r24	; 0x01
     19e:	9a 83       	std	Y+2, r25	; 0x02
     1a0:	8f 89       	ldd	r24, Y+23	; 0x17
     1a2:	98 8d       	ldd	r25, Y+24	; 0x18
     1a4:	fc 01       	movw	r30, r24
     1a6:	24 85       	ldd	r18, Z+12	; 0x0c
     1a8:	35 85       	ldd	r19, Z+13	; 0x0d
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	28 17       	cp	r18, r24
     1b0:	39 07       	cpc	r19, r25
     1b2:	2c f4       	brge	.+10     	; 0x1be <pid_Controller+0x78>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	9f e7       	ldi	r25, 0x7F	; 127
     1b8:	8b 83       	std	Y+3, r24	; 0x03
     1ba:	9c 83       	std	Y+4, r25	; 0x04
     1bc:	23 c0       	rjmp	.+70     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
     1be:	8f 89       	ldd	r24, Y+23	; 0x17
     1c0:	98 8d       	ldd	r25, Y+24	; 0x18
     1c2:	fc 01       	movw	r30, r24
     1c4:	84 85       	ldd	r24, Z+12	; 0x0c
     1c6:	95 85       	ldd	r25, Z+13	; 0x0d
     1c8:	22 27       	eor	r18, r18
     1ca:	33 27       	eor	r19, r19
     1cc:	28 1b       	sub	r18, r24
     1ce:	39 0b       	sbc	r19, r25
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	82 17       	cp	r24, r18
     1d6:	93 07       	cpc	r25, r19
     1d8:	2c f4       	brge	.+10     	; 0x1e4 <pid_Controller+0x9e>
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e8       	ldi	r25, 0x80	; 128
     1de:	8b 83       	std	Y+3, r24	; 0x03
     1e0:	9c 83       	std	Y+4, r25	; 0x04
     1e2:	10 c0       	rjmp	.+32     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	fc 01       	movw	r30, r24
     1ea:	46 81       	ldd	r20, Z+6	; 0x06
     1ec:	57 81       	ldd	r21, Z+7	; 0x07
     1ee:	29 81       	ldd	r18, Y+1	; 0x01
     1f0:	3a 81       	ldd	r19, Y+2	; 0x02
     1f2:	42 9f       	mul	r20, r18
     1f4:	c0 01       	movw	r24, r0
     1f6:	43 9f       	mul	r20, r19
     1f8:	90 0d       	add	r25, r0
     1fa:	52 9f       	mul	r21, r18
     1fc:	90 0d       	add	r25, r0
     1fe:	11 24       	eor	r1, r1
     200:	8b 83       	std	Y+3, r24	; 0x03
     202:	9c 83       	std	Y+4, r25	; 0x04
     204:	8f 89       	ldd	r24, Y+23	; 0x17
     206:	98 8d       	ldd	r25, Y+24	; 0x18
     208:	fc 01       	movw	r30, r24
     20a:	22 81       	ldd	r18, Z+2	; 0x02
     20c:	33 81       	ldd	r19, Z+3	; 0x03
     20e:	44 81       	ldd	r20, Z+4	; 0x04
     210:	55 81       	ldd	r21, Z+5	; 0x05
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	09 2e       	mov	r0, r25
     218:	00 0c       	add	r0, r0
     21a:	aa 0b       	sbc	r26, r26
     21c:	bb 0b       	sbc	r27, r27
     21e:	82 0f       	add	r24, r18
     220:	93 1f       	adc	r25, r19
     222:	a4 1f       	adc	r26, r20
     224:	b5 1f       	adc	r27, r21
     226:	8d 87       	std	Y+13, r24	; 0x0d
     228:	9e 87       	std	Y+14, r25	; 0x0e
     22a:	af 87       	std	Y+15, r26	; 0x0f
     22c:	b8 8b       	std	Y+16, r27	; 0x10
     22e:	8f 89       	ldd	r24, Y+23	; 0x17
     230:	98 8d       	ldd	r25, Y+24	; 0x18
     232:	fc 01       	movw	r30, r24
     234:	26 85       	ldd	r18, Z+14	; 0x0e
     236:	37 85       	ldd	r19, Z+15	; 0x0f
     238:	40 89       	ldd	r20, Z+16	; 0x10
     23a:	51 89       	ldd	r21, Z+17	; 0x11
     23c:	8d 85       	ldd	r24, Y+13	; 0x0d
     23e:	9e 85       	ldd	r25, Y+14	; 0x0e
     240:	af 85       	ldd	r26, Y+15	; 0x0f
     242:	b8 89       	ldd	r27, Y+16	; 0x10
     244:	28 17       	cp	r18, r24
     246:	39 07       	cpc	r19, r25
     248:	4a 07       	cpc	r20, r26
     24a:	5b 07       	cpc	r21, r27
     24c:	bc f4       	brge	.+46     	; 0x27c <__DATA_REGION_LENGTH__+0x7c>
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	9f ef       	ldi	r25, 0xFF	; 255
     252:	af ef       	ldi	r26, 0xFF	; 255
     254:	bf e3       	ldi	r27, 0x3F	; 63
     256:	8d 83       	std	Y+5, r24	; 0x05
     258:	9e 83       	std	Y+6, r25	; 0x06
     25a:	af 83       	std	Y+7, r26	; 0x07
     25c:	b8 87       	std	Y+8, r27	; 0x08
     25e:	8f 89       	ldd	r24, Y+23	; 0x17
     260:	98 8d       	ldd	r25, Y+24	; 0x18
     262:	fc 01       	movw	r30, r24
     264:	86 85       	ldd	r24, Z+14	; 0x0e
     266:	97 85       	ldd	r25, Z+15	; 0x0f
     268:	a0 89       	ldd	r26, Z+16	; 0x10
     26a:	b1 89       	ldd	r27, Z+17	; 0x11
     26c:	2f 89       	ldd	r18, Y+23	; 0x17
     26e:	38 8d       	ldd	r19, Y+24	; 0x18
     270:	f9 01       	movw	r30, r18
     272:	82 83       	std	Z+2, r24	; 0x02
     274:	93 83       	std	Z+3, r25	; 0x03
     276:	a4 83       	std	Z+4, r26	; 0x04
     278:	b5 83       	std	Z+5, r27	; 0x05
     27a:	59 c0       	rjmp	.+178    	; 0x32e <__DATA_REGION_LENGTH__+0x12e>
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	fc 01       	movw	r30, r24
     282:	86 85       	ldd	r24, Z+14	; 0x0e
     284:	97 85       	ldd	r25, Z+15	; 0x0f
     286:	a0 89       	ldd	r26, Z+16	; 0x10
     288:	b1 89       	ldd	r27, Z+17	; 0x11
     28a:	22 27       	eor	r18, r18
     28c:	33 27       	eor	r19, r19
     28e:	a9 01       	movw	r20, r18
     290:	28 1b       	sub	r18, r24
     292:	39 0b       	sbc	r19, r25
     294:	4a 0b       	sbc	r20, r26
     296:	5b 0b       	sbc	r21, r27
     298:	8d 85       	ldd	r24, Y+13	; 0x0d
     29a:	9e 85       	ldd	r25, Y+14	; 0x0e
     29c:	af 85       	ldd	r26, Y+15	; 0x0f
     29e:	b8 89       	ldd	r27, Y+16	; 0x10
     2a0:	82 17       	cp	r24, r18
     2a2:	93 07       	cpc	r25, r19
     2a4:	a4 07       	cpc	r26, r20
     2a6:	b5 07       	cpc	r27, r21
     2a8:	f4 f4       	brge	.+60     	; 0x2e6 <__DATA_REGION_LENGTH__+0xe6>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	a0 e0       	ldi	r26, 0x00	; 0
     2b0:	b0 ec       	ldi	r27, 0xC0	; 192
     2b2:	8d 83       	std	Y+5, r24	; 0x05
     2b4:	9e 83       	std	Y+6, r25	; 0x06
     2b6:	af 83       	std	Y+7, r26	; 0x07
     2b8:	b8 87       	std	Y+8, r27	; 0x08
     2ba:	8f 89       	ldd	r24, Y+23	; 0x17
     2bc:	98 8d       	ldd	r25, Y+24	; 0x18
     2be:	fc 01       	movw	r30, r24
     2c0:	86 85       	ldd	r24, Z+14	; 0x0e
     2c2:	97 85       	ldd	r25, Z+15	; 0x0f
     2c4:	a0 89       	ldd	r26, Z+16	; 0x10
     2c6:	b1 89       	ldd	r27, Z+17	; 0x11
     2c8:	b0 95       	com	r27
     2ca:	a0 95       	com	r26
     2cc:	90 95       	com	r25
     2ce:	81 95       	neg	r24
     2d0:	9f 4f       	sbci	r25, 0xFF	; 255
     2d2:	af 4f       	sbci	r26, 0xFF	; 255
     2d4:	bf 4f       	sbci	r27, 0xFF	; 255
     2d6:	2f 89       	ldd	r18, Y+23	; 0x17
     2d8:	38 8d       	ldd	r19, Y+24	; 0x18
     2da:	f9 01       	movw	r30, r18
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	93 83       	std	Z+3, r25	; 0x03
     2e0:	a4 83       	std	Z+4, r26	; 0x04
     2e2:	b5 83       	std	Z+5, r27	; 0x05
     2e4:	24 c0       	rjmp	.+72     	; 0x32e <__DATA_REGION_LENGTH__+0x12e>
     2e6:	2f 89       	ldd	r18, Y+23	; 0x17
     2e8:	38 8d       	ldd	r19, Y+24	; 0x18
     2ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     2ee:	af 85       	ldd	r26, Y+15	; 0x0f
     2f0:	b8 89       	ldd	r27, Y+16	; 0x10
     2f2:	f9 01       	movw	r30, r18
     2f4:	82 83       	std	Z+2, r24	; 0x02
     2f6:	93 83       	std	Z+3, r25	; 0x03
     2f8:	a4 83       	std	Z+4, r26	; 0x04
     2fa:	b5 83       	std	Z+5, r27	; 0x05
     2fc:	8f 89       	ldd	r24, Y+23	; 0x17
     2fe:	98 8d       	ldd	r25, Y+24	; 0x18
     300:	fc 01       	movw	r30, r24
     302:	80 85       	ldd	r24, Z+8	; 0x08
     304:	91 85       	ldd	r25, Z+9	; 0x09
     306:	9c 01       	movw	r18, r24
     308:	99 0f       	add	r25, r25
     30a:	44 0b       	sbc	r20, r20
     30c:	55 0b       	sbc	r21, r21
     30e:	8f 89       	ldd	r24, Y+23	; 0x17
     310:	98 8d       	ldd	r25, Y+24	; 0x18
     312:	fc 01       	movw	r30, r24
     314:	82 81       	ldd	r24, Z+2	; 0x02
     316:	93 81       	ldd	r25, Z+3	; 0x03
     318:	a4 81       	ldd	r26, Z+4	; 0x04
     31a:	b5 81       	ldd	r27, Z+5	; 0x05
     31c:	bc 01       	movw	r22, r24
     31e:	cd 01       	movw	r24, r26
     320:	15 d8       	rcall	.-4054   	; 0xfffff34c <__eeprom_end+0xff7ef34c>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	8d 83       	std	Y+5, r24	; 0x05
     328:	9e 83       	std	Y+6, r25	; 0x06
     32a:	af 83       	std	Y+7, r26	; 0x07
     32c:	b8 87       	std	Y+8, r27	; 0x08
     32e:	8f 89       	ldd	r24, Y+23	; 0x17
     330:	98 8d       	ldd	r25, Y+24	; 0x18
     332:	fc 01       	movw	r30, r24
     334:	42 85       	ldd	r20, Z+10	; 0x0a
     336:	53 85       	ldd	r21, Z+11	; 0x0b
     338:	8f 89       	ldd	r24, Y+23	; 0x17
     33a:	98 8d       	ldd	r25, Y+24	; 0x18
     33c:	fc 01       	movw	r30, r24
     33e:	20 81       	ld	r18, Z
     340:	31 81       	ldd	r19, Z+1	; 0x01
     342:	8d 89       	ldd	r24, Y+21	; 0x15
     344:	9e 89       	ldd	r25, Y+22	; 0x16
     346:	28 1b       	sub	r18, r24
     348:	39 0b       	sbc	r19, r25
     34a:	42 9f       	mul	r20, r18
     34c:	c0 01       	movw	r24, r0
     34e:	43 9f       	mul	r20, r19
     350:	90 0d       	add	r25, r0
     352:	52 9f       	mul	r21, r18
     354:	90 0d       	add	r25, r0
     356:	11 24       	eor	r1, r1
     358:	89 8b       	std	Y+17, r24	; 0x11
     35a:	9a 8b       	std	Y+18, r25	; 0x12
     35c:	8f 89       	ldd	r24, Y+23	; 0x17
     35e:	98 8d       	ldd	r25, Y+24	; 0x18
     360:	2d 89       	ldd	r18, Y+21	; 0x15
     362:	3e 89       	ldd	r19, Y+22	; 0x16
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
     368:	31 83       	std	Z+1, r19	; 0x01
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	9c 81       	ldd	r25, Y+4	; 0x04
     36e:	9c 01       	movw	r18, r24
     370:	99 0f       	add	r25, r25
     372:	44 0b       	sbc	r20, r20
     374:	55 0b       	sbc	r21, r21
     376:	8d 81       	ldd	r24, Y+5	; 0x05
     378:	9e 81       	ldd	r25, Y+6	; 0x06
     37a:	af 81       	ldd	r26, Y+7	; 0x07
     37c:	b8 85       	ldd	r27, Y+8	; 0x08
     37e:	28 0f       	add	r18, r24
     380:	39 1f       	adc	r19, r25
     382:	4a 1f       	adc	r20, r26
     384:	5b 1f       	adc	r21, r27
     386:	89 89       	ldd	r24, Y+17	; 0x11
     388:	9a 89       	ldd	r25, Y+18	; 0x12
     38a:	09 2e       	mov	r0, r25
     38c:	00 0c       	add	r0, r0
     38e:	aa 0b       	sbc	r26, r26
     390:	bb 0b       	sbc	r27, r27
     392:	82 0f       	add	r24, r18
     394:	93 1f       	adc	r25, r19
     396:	a4 1f       	adc	r26, r20
     398:	b5 1f       	adc	r27, r21
     39a:	bb 23       	and	r27, r27
     39c:	24 f4       	brge	.+8      	; 0x3a6 <__DATA_REGION_LENGTH__+0x1a6>
     39e:	81 58       	subi	r24, 0x81	; 129
     3a0:	9f 4f       	sbci	r25, 0xFF	; 255
     3a2:	af 4f       	sbci	r26, 0xFF	; 255
     3a4:	bf 4f       	sbci	r27, 0xFF	; 255
     3a6:	68 94       	set
     3a8:	16 f8       	bld	r1, 6
     3aa:	b5 95       	asr	r27
     3ac:	a7 95       	ror	r26
     3ae:	97 95       	ror	r25
     3b0:	87 95       	ror	r24
     3b2:	16 94       	lsr	r1
     3b4:	d1 f7       	brne	.-12     	; 0x3aa <__DATA_REGION_LENGTH__+0x1aa>
     3b6:	89 87       	std	Y+9, r24	; 0x09
     3b8:	9a 87       	std	Y+10, r25	; 0x0a
     3ba:	ab 87       	std	Y+11, r26	; 0x0b
     3bc:	bc 87       	std	Y+12, r27	; 0x0c
     3be:	89 85       	ldd	r24, Y+9	; 0x09
     3c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c2:	ab 85       	ldd	r26, Y+11	; 0x0b
     3c4:	bc 85       	ldd	r27, Y+12	; 0x0c
     3c6:	81 15       	cp	r24, r1
     3c8:	90 48       	sbci	r25, 0x80	; 128
     3ca:	a1 05       	cpc	r26, r1
     3cc:	b1 05       	cpc	r27, r1
     3ce:	4c f0       	brlt	.+18     	; 0x3e2 <__DATA_REGION_LENGTH__+0x1e2>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	9f e7       	ldi	r25, 0x7F	; 127
     3d4:	a0 e0       	ldi	r26, 0x00	; 0
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	89 87       	std	Y+9, r24	; 0x09
     3da:	9a 87       	std	Y+10, r25	; 0x0a
     3dc:	ab 87       	std	Y+11, r26	; 0x0b
     3de:	bc 87       	std	Y+12, r27	; 0x0c
     3e0:	11 c0       	rjmp	.+34     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3e2:	89 85       	ldd	r24, Y+9	; 0x09
     3e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e6:	ab 85       	ldd	r26, Y+11	; 0x0b
     3e8:	bc 85       	ldd	r27, Y+12	; 0x0c
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	90 48       	sbci	r25, 0x80	; 128
     3ee:	af 4f       	sbci	r26, 0xFF	; 255
     3f0:	bf 4f       	sbci	r27, 0xFF	; 255
     3f2:	44 f4       	brge	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e8       	ldi	r25, 0x80	; 128
     3f8:	af ef       	ldi	r26, 0xFF	; 255
     3fa:	bf ef       	ldi	r27, 0xFF	; 255
     3fc:	89 87       	std	Y+9, r24	; 0x09
     3fe:	9a 87       	std	Y+10, r25	; 0x0a
     400:	ab 87       	std	Y+11, r26	; 0x0b
     402:	bc 87       	std	Y+12, r27	; 0x0c
     404:	89 85       	ldd	r24, Y+9	; 0x09
     406:	9a 85       	ldd	r25, Y+10	; 0x0a
     408:	68 96       	adiw	r28, 0x18	; 24
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <main>:
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <main+0x6>
     41a:	00 d0       	rcall	.+0      	; 0x41c <main+0x8>
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	25 de       	rcall	.-950    	; 0x6c <atmel_start_init>
     422:	80 e2       	ldi	r24, 0x20	; 32
     424:	94 e0       	ldi	r25, 0x04	; 4
     426:	20 e2       	ldi	r18, 0x20	; 32
     428:	34 e0       	ldi	r19, 0x04	; 4
     42a:	f9 01       	movw	r30, r18
     42c:	21 81       	ldd	r18, Z+1	; 0x01
     42e:	2b 62       	ori	r18, 0x2B	; 43
     430:	fc 01       	movw	r30, r24
     432:	21 83       	std	Z+1, r18	; 0x01
     434:	8e d1       	rcall	.+796    	; 0x752 <TCA_setup>
     436:	b7 d1       	rcall	.+878    	; 0x7a6 <TCB_setup>
     438:	24 d1       	rcall	.+584    	; 0x682 <ADC_setup>
     43a:	78 94       	sei
     43c:	d0 d0       	rcall	.+416    	; 0x5de <get_rotor_position>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	89 83       	std	Y+1, r24	; 0x01
     444:	9a 83       	std	Y+2, r25	; 0x02
     446:	20 e5       	ldi	r18, 0x50	; 80
     448:	3e e3       	ldi	r19, 0x3E	; 62
     44a:	44 ef       	ldi	r20, 0xF4	; 244
     44c:	51 e0       	ldi	r21, 0x01	; 1
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	70 e0       	ldi	r23, 0x00	; 0
     452:	88 ec       	ldi	r24, 0xC8	; 200
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	13 de       	rcall	.-986    	; 0x7e <pid_Init>
     458:	80 91 0e 3e 	lds	r24, 0x3E0E	; 0x803e0e <loop>
     45c:	90 91 0f 3e 	lds	r25, 0x3E0F	; 0x803e0f <loop+0x1>
     460:	89 2b       	or	r24, r25
     462:	d1 f3       	breq	.-12     	; 0x458 <main+0x44>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	94 e0       	ldi	r25, 0x04	; 4
     468:	20 e2       	ldi	r18, 0x20	; 32
     46a:	fc 01       	movw	r30, r24
     46c:	25 83       	std	Z+5, r18	; 0x05
     46e:	b7 d0       	rcall	.+366    	; 0x5de <get_rotor_position>
     470:	dc 01       	movw	r26, r24
     472:	cb 01       	movw	r24, r22
     474:	80 93 20 3e 	sts	0x3E20, r24	; 0x803e20 <rotorAngle>
     478:	90 93 21 3e 	sts	0x3E21, r25	; 0x803e21 <rotorAngle+0x1>
     47c:	20 91 20 3e 	lds	r18, 0x3E20	; 0x803e20 <rotorAngle>
     480:	30 91 21 3e 	lds	r19, 0x3E21	; 0x803e21 <rotorAngle+0x1>
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	40 e5       	ldi	r20, 0x50	; 80
     48a:	5e e3       	ldi	r21, 0x3E	; 62
     48c:	b9 01       	movw	r22, r18
     48e:	5b de       	rcall	.-842    	; 0x146 <pid_Controller>
     490:	8b 83       	std	Y+3, r24	; 0x03
     492:	9c 83       	std	Y+4, r25	; 0x04
     494:	8b 81       	ldd	r24, Y+3	; 0x03
     496:	9c 81       	ldd	r25, Y+4	; 0x04
     498:	99 23       	and	r25, r25
     49a:	0c f4       	brge	.+2      	; 0x49e <main+0x8a>
     49c:	40 c0       	rjmp	.+128    	; 0x51e <main+0x10a>
     49e:	10 92 22 3e 	sts	0x3E22, r1	; 0x803e22 <direction>
     4a2:	10 92 23 3e 	sts	0x3E23, r1	; 0x803e23 <direction+0x1>
     4a6:	10 92 24 3e 	sts	0x3E24, r1	; 0x803e24 <direction+0x2>
     4aa:	10 92 25 3e 	sts	0x3E25, r1	; 0x803e25 <direction+0x3>
     4ae:	2b 81       	ldd	r18, Y+3	; 0x03
     4b0:	3c 81       	ldd	r19, Y+4	; 0x04
     4b2:	44 e6       	ldi	r20, 0x64	; 100
     4b4:	42 9f       	mul	r20, r18
     4b6:	c0 01       	movw	r24, r0
     4b8:	43 9f       	mul	r20, r19
     4ba:	90 0d       	add	r25, r0
     4bc:	11 24       	eor	r1, r1
     4be:	09 2e       	mov	r0, r25
     4c0:	00 0c       	add	r0, r0
     4c2:	aa 0b       	sbc	r26, r26
     4c4:	bb 0b       	sbc	r27, r27
     4c6:	bc 01       	movw	r22, r24
     4c8:	cd 01       	movw	r24, r26
     4ca:	b3 d6       	rcall	.+3430   	; 0x1232 <__floatsisf>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	38 e3       	ldi	r19, 0x38	; 56
     4d4:	4c e9       	ldi	r20, 0x9C	; 156
     4d6:	55 e4       	ldi	r21, 0x45	; 69
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	0e d7       	rcall	.+3612   	; 0x12fa <__gesf2>
     4de:	18 16       	cp	r1, r24
     4e0:	1c f4       	brge	.+6      	; 0x4e8 <main+0xd4>
     4e2:	87 e8       	ldi	r24, 0x87	; 135
     4e4:	93 e1       	ldi	r25, 0x13	; 19
     4e6:	16 c0       	rjmp	.+44     	; 0x514 <main+0x100>
     4e8:	2b 81       	ldd	r18, Y+3	; 0x03
     4ea:	3c 81       	ldd	r19, Y+4	; 0x04
     4ec:	44 e6       	ldi	r20, 0x64	; 100
     4ee:	42 9f       	mul	r20, r18
     4f0:	c0 01       	movw	r24, r0
     4f2:	43 9f       	mul	r20, r19
     4f4:	90 0d       	add	r25, r0
     4f6:	11 24       	eor	r1, r1
     4f8:	09 2e       	mov	r0, r25
     4fa:	00 0c       	add	r0, r0
     4fc:	aa 0b       	sbc	r26, r26
     4fe:	bb 0b       	sbc	r27, r27
     500:	bc 01       	movw	r22, r24
     502:	cd 01       	movw	r24, r26
     504:	96 d6       	rcall	.+3372   	; 0x1232 <__floatsisf>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	bc 01       	movw	r22, r24
     50c:	cd 01       	movw	r24, r26
     50e:	59 d6       	rcall	.+3250   	; 0x11c2 <__fixsfsi>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <speed_command>
     518:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <speed_command+0x1>
     51c:	43 c0       	rjmp	.+134    	; 0x5a4 <main+0x190>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	80 93 22 3e 	sts	0x3E22, r24	; 0x803e22 <direction>
     52a:	90 93 23 3e 	sts	0x3E23, r25	; 0x803e23 <direction+0x1>
     52e:	a0 93 24 3e 	sts	0x3E24, r26	; 0x803e24 <direction+0x2>
     532:	b0 93 25 3e 	sts	0x3E25, r27	; 0x803e25 <direction+0x3>
     536:	2b 81       	ldd	r18, Y+3	; 0x03
     538:	3c 81       	ldd	r19, Y+4	; 0x04
     53a:	4c e9       	ldi	r20, 0x9C	; 156
     53c:	42 03       	mulsu	r20, r18
     53e:	c0 01       	movw	r24, r0
     540:	43 9f       	mul	r20, r19
     542:	90 0d       	add	r25, r0
     544:	11 24       	eor	r1, r1
     546:	09 2e       	mov	r0, r25
     548:	00 0c       	add	r0, r0
     54a:	aa 0b       	sbc	r26, r26
     54c:	bb 0b       	sbc	r27, r27
     54e:	bc 01       	movw	r22, r24
     550:	cd 01       	movw	r24, r26
     552:	6f d6       	rcall	.+3294   	; 0x1232 <__floatsisf>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	38 e3       	ldi	r19, 0x38	; 56
     55c:	4c e9       	ldi	r20, 0x9C	; 156
     55e:	55 e4       	ldi	r21, 0x45	; 69
     560:	bc 01       	movw	r22, r24
     562:	cd 01       	movw	r24, r26
     564:	ca d6       	rcall	.+3476   	; 0x12fa <__gesf2>
     566:	18 16       	cp	r1, r24
     568:	1c f4       	brge	.+6      	; 0x570 <main+0x15c>
     56a:	87 e8       	ldi	r24, 0x87	; 135
     56c:	93 e1       	ldi	r25, 0x13	; 19
     56e:	16 c0       	rjmp	.+44     	; 0x59c <main+0x188>
     570:	2b 81       	ldd	r18, Y+3	; 0x03
     572:	3c 81       	ldd	r19, Y+4	; 0x04
     574:	4c e9       	ldi	r20, 0x9C	; 156
     576:	42 03       	mulsu	r20, r18
     578:	c0 01       	movw	r24, r0
     57a:	43 9f       	mul	r20, r19
     57c:	90 0d       	add	r25, r0
     57e:	11 24       	eor	r1, r1
     580:	09 2e       	mov	r0, r25
     582:	00 0c       	add	r0, r0
     584:	aa 0b       	sbc	r26, r26
     586:	bb 0b       	sbc	r27, r27
     588:	bc 01       	movw	r22, r24
     58a:	cd 01       	movw	r24, r26
     58c:	52 d6       	rcall	.+3236   	; 0x1232 <__floatsisf>
     58e:	dc 01       	movw	r26, r24
     590:	cb 01       	movw	r24, r22
     592:	bc 01       	movw	r22, r24
     594:	cd 01       	movw	r24, r26
     596:	15 d6       	rcall	.+3114   	; 0x11c2 <__fixsfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <speed_command>
     5a0:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <speed_command+0x1>
     5a4:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
     5a8:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     5ac:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
     5b0:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	a1 1d       	adc	r26, r1
     5b8:	b1 1d       	adc	r27, r1
     5ba:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
     5be:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
     5c2:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
     5c6:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
     5ca:	80 e2       	ldi	r24, 0x20	; 32
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	20 e2       	ldi	r18, 0x20	; 32
     5d0:	fc 01       	movw	r30, r24
     5d2:	26 83       	std	Z+6, r18	; 0x06
     5d4:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <loop>
     5d8:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <loop+0x1>
     5dc:	3d cf       	rjmp	.-390    	; 0x458 <main+0x44>

000005de <get_rotor_position>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <get_rotor_position+0x6>
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <get_rotor_position+0x8>
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	96 e0       	ldi	r25, 0x06	; 6
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 87       	std	Z+8, r18	; 0x08
     5f4:	00 00       	nop
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	96 e0       	ldi	r25, 0x06	; 6
     5fa:	fc 01       	movw	r30, r24
     5fc:	83 85       	ldd	r24, Z+11	; 0x0b
     5fe:	88 2f       	mov	r24, r24
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	81 70       	andi	r24, 0x01	; 1
     604:	99 27       	eor	r25, r25
     606:	89 2b       	or	r24, r25
     608:	b1 f3       	breq	.-20     	; 0x5f6 <get_rotor_position+0x18>
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	96 e0       	ldi	r25, 0x06	; 6
     60e:	fc 01       	movw	r30, r24
     610:	80 89       	ldd	r24, Z+16	; 0x10
     612:	91 89       	ldd	r25, Z+17	; 0x11
     614:	9c 01       	movw	r18, r24
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	88 e6       	ldi	r24, 0x68	; 104
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	dc 01       	movw	r26, r24
     620:	f5 d6       	rcall	.+3562   	; 0x140c <__muluhisi3>
     622:	dc 01       	movw	r26, r24
     624:	cb 01       	movw	r24, r22
     626:	29 ef       	ldi	r18, 0xF9	; 249
     628:	33 e0       	ldi	r19, 0x03	; 3
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	bc 01       	movw	r22, r24
     630:	cd 01       	movw	r24, r26
     632:	ae d6       	rcall	.+3420   	; 0x1390 <__udivmodsi4>
     634:	da 01       	movw	r26, r20
     636:	c9 01       	movw	r24, r18
     638:	89 83       	std	Y+1, r24	; 0x01
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	ab 83       	std	Y+3, r26	; 0x03
     63e:	bc 83       	std	Y+4, r27	; 0x04
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	96 e0       	ldi	r25, 0x06	; 6
     644:	fc 01       	movw	r30, r24
     646:	80 89       	ldd	r24, Z+16	; 0x10
     648:	91 89       	ldd	r25, Z+17	; 0x11
     64a:	20 91 2a 3e 	lds	r18, 0x3E2A	; 0x803e2a <max_angle>
     64e:	30 91 2b 3e 	lds	r19, 0x3E2B	; 0x803e2b <max_angle+0x1>
     652:	28 17       	cp	r18, r24
     654:	39 07       	cpc	r19, r25
     656:	48 f4       	brcc	.+18     	; 0x66a <get_rotor_position+0x8c>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	96 e0       	ldi	r25, 0x06	; 6
     65c:	fc 01       	movw	r30, r24
     65e:	80 89       	ldd	r24, Z+16	; 0x10
     660:	91 89       	ldd	r25, Z+17	; 0x11
     662:	80 93 2a 3e 	sts	0x3E2A, r24	; 0x803e2a <max_angle>
     666:	90 93 2b 3e 	sts	0x3E2B, r25	; 0x803e2b <max_angle+0x1>
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	9a 81       	ldd	r25, Y+2	; 0x02
     66e:	ab 81       	ldd	r26, Y+3	; 0x03
     670:	bc 81       	ldd	r27, Y+4	; 0x04
     672:	bc 01       	movw	r22, r24
     674:	cd 01       	movw	r24, r26
     676:	24 96       	adiw	r28, 0x04	; 4
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <ADC_setup>:
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	80 ea       	ldi	r24, 0xA0	; 160
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	20 ea       	ldi	r18, 0xA0	; 160
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	23 60       	ori	r18, 0x03	; 3
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	80 ea       	ldi	r24, 0xA0	; 160
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	20 ea       	ldi	r18, 0xA0	; 160
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	f9 01       	movw	r30, r18
     6a6:	21 81       	ldd	r18, Z+1	; 0x01
     6a8:	21 60       	ori	r18, 0x01	; 1
     6aa:	fc 01       	movw	r30, r24
     6ac:	21 83       	std	Z+1, r18	; 0x01
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	96 e0       	ldi	r25, 0x06	; 6
     6b2:	21 e4       	ldi	r18, 0x41	; 65
     6b4:	fc 01       	movw	r30, r24
     6b6:	20 83       	st	Z, r18
     6b8:	80 e8       	ldi	r24, 0x80	; 128
     6ba:	96 e0       	ldi	r25, 0x06	; 6
     6bc:	2f ef       	ldi	r18, 0xFF	; 255
     6be:	fc 01       	movw	r30, r24
     6c0:	21 83       	std	Z+1, r18	; 0x01
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	94 e0       	ldi	r25, 0x04	; 4
     6c6:	20 e8       	ldi	r18, 0x80	; 128
     6c8:	fc 01       	movw	r30, r24
     6ca:	22 83       	std	Z+2, r18	; 0x02
     6cc:	80 ea       	ldi	r24, 0xA0	; 160
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	20 ea       	ldi	r18, 0xA0	; 160
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	20 81       	ld	r18, Z
     6d8:	20 63       	ori	r18, 0x30	; 48
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
     6de:	80 ea       	ldi	r24, 0xA0	; 160
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	20 ea       	ldi	r18, 0xA0	; 160
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	f9 01       	movw	r30, r18
     6e8:	21 81       	ldd	r18, Z+1	; 0x01
     6ea:	22 60       	ori	r18, 0x02	; 2
     6ec:	fc 01       	movw	r30, r24
     6ee:	21 83       	std	Z+1, r18	; 0x01
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	96 e0       	ldi	r25, 0x06	; 6
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	36 e0       	ldi	r19, 0x06	; 6
     6f8:	f9 01       	movw	r30, r18
     6fa:	20 81       	ld	r18, Z
     6fc:	fc 01       	movw	r30, r24
     6fe:	20 83       	st	Z, r18
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	96 e0       	ldi	r25, 0x06	; 6
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	36 e0       	ldi	r19, 0x06	; 6
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	22 60       	ori	r18, 0x02	; 2
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	96 e0       	ldi	r25, 0x06	; 6
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	36 e0       	ldi	r19, 0x06	; 6
     71a:	f9 01       	movw	r30, r18
     71c:	22 81       	ldd	r18, Z+2	; 0x02
     71e:	23 65       	ori	r18, 0x53	; 83
     720:	fc 01       	movw	r30, r24
     722:	22 83       	std	Z+2, r18	; 0x02
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	96 e0       	ldi	r25, 0x06	; 6
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	fc 01       	movw	r30, r24
     72c:	26 8b       	std	Z+22, r18	; 0x16
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	27 e0       	ldi	r18, 0x07	; 7
     734:	fc 01       	movw	r30, r24
     736:	26 83       	std	Z+6, r18	; 0x06
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	96 e0       	ldi	r25, 0x06	; 6
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	36 e0       	ldi	r19, 0x06	; 6
     740:	f9 01       	movw	r30, r18
     742:	20 81       	ld	r18, Z
     744:	21 60       	ori	r18, 0x01	; 1
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
     74a:	00 00       	nop
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <TCA_setup>:
//

void TCA_setup(void) {
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_ENABLE_bm | TCA_SINGLE_CLKSEL_DIV4_gc);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	9a e0       	ldi	r25, 0x0A	; 10
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	3a e0       	ldi	r19, 0x0A	; 10
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	25 60       	ori	r18, 0x05	; 5
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_FRQ_gc | TCA_SINGLE_CMP0EN_bm;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	9a e0       	ldi	r25, 0x0A	; 10
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	3a e0       	ldi	r19, 0x0A	; 10
     774:	f9 01       	movw	r30, r18
     776:	21 81       	ldd	r18, Z+1	; 0x01
     778:	21 61       	ori	r18, 0x11	; 17
     77a:	fc 01       	movw	r30, r24
     77c:	21 83       	std	Z+1, r18	; 0x01
	TCA0.SINGLE.PER = TCA0_PERIOD;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	9a e0       	ldi	r25, 0x0A	; 10
     782:	27 e8       	ldi	r18, 0x87	; 135
     784:	33 e1       	ldi	r19, 0x13	; 19
     786:	fc 01       	movw	r30, r24
     788:	26 a3       	std	Z+38, r18	; 0x26
     78a:	37 a3       	std	Z+39, r19	; 0x27
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	9a e0       	ldi	r25, 0x0A	; 10
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	3a e0       	ldi	r19, 0x0A	; 10
     794:	f9 01       	movw	r30, r18
     796:	22 85       	ldd	r18, Z+10	; 0x0a
     798:	20 61       	ori	r18, 0x10	; 16
     79a:	fc 01       	movw	r30, r24
     79c:	22 87       	std	Z+10, r18	; 0x0a
}
     79e:	00 00       	nop
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <TCB_setup>:
//
void TCB_setup(void) {
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_CLKTCA_gc;
     7ae:	80 e4       	ldi	r24, 0x40	; 64
     7b0:	9a e0       	ldi	r25, 0x0A	; 10
     7b2:	20 e4       	ldi	r18, 0x40	; 64
     7b4:	3a e0       	ldi	r19, 0x0A	; 10
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	25 60       	ori	r18, 0x05	; 5
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
	TCB0.INTCTRL |= TCB_CAPT_bm;
     7c0:	80 e4       	ldi	r24, 0x40	; 64
     7c2:	9a e0       	ldi	r25, 0x0A	; 10
     7c4:	20 e4       	ldi	r18, 0x40	; 64
     7c6:	3a e0       	ldi	r19, 0x0A	; 10
     7c8:	f9 01       	movw	r30, r18
     7ca:	25 81       	ldd	r18, Z+5	; 0x05
     7cc:	21 60       	ori	r18, 0x01	; 1
     7ce:	fc 01       	movw	r30, r24
     7d0:	25 83       	std	Z+5, r18	; 0x05
	TCB0.CCMP = F_TCA / F_CALC;
     7d2:	80 e4       	ldi	r24, 0x40	; 64
     7d4:	9a e0       	ldi	r25, 0x0A	; 10
     7d6:	24 ec       	ldi	r18, 0xC4	; 196
     7d8:	39 e0       	ldi	r19, 0x09	; 9
     7da:	fc 01       	movw	r30, r24
     7dc:	24 87       	std	Z+12, r18	; 0x0c
     7de:	35 87       	std	Z+13, r19	; 0x0d
}
     7e0:	00 00       	nop
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <__vector_10>:
//
ISR(TCA0_CMP0_vect) {
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	9a e0       	ldi	r25, 0x0A	; 10
     814:	20 e1       	ldi	r18, 0x10	; 16
     816:	fc 01       	movw	r30, r24
     818:	23 87       	std	Z+11, r18	; 0x0b

	TCA0.SINGLE.CMP0 = speed_command;
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	9a e0       	ldi	r25, 0x0A	; 10
     81e:	20 91 0c 3e 	lds	r18, 0x3E0C	; 0x803e0c <speed_command>
     822:	30 91 0d 3e 	lds	r19, 0x3E0D	; 0x803e0d <speed_command+0x1>
     826:	fc 01       	movw	r30, r24
     828:	20 a7       	std	Z+40, r18	; 0x28
     82a:	31 a7       	std	Z+41, r19	; 0x29
	if (direction != prev_dir) {
     82c:	20 91 22 3e 	lds	r18, 0x3E22	; 0x803e22 <direction>
     830:	30 91 23 3e 	lds	r19, 0x3E23	; 0x803e23 <direction+0x1>
     834:	40 91 24 3e 	lds	r20, 0x3E24	; 0x803e24 <direction+0x2>
     838:	50 91 25 3e 	lds	r21, 0x3E25	; 0x803e25 <direction+0x3>
     83c:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <prev_dir>
     840:	90 91 15 3e 	lds	r25, 0x3E15	; 0x803e15 <prev_dir+0x1>
     844:	a0 91 16 3e 	lds	r26, 0x3E16	; 0x803e16 <prev_dir+0x2>
     848:	b0 91 17 3e 	lds	r27, 0x3E17	; 0x803e17 <prev_dir+0x3>
     84c:	28 17       	cp	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	4a 07       	cpc	r20, r26
     852:	5b 07       	cpc	r21, r27
     854:	49 f1       	breq	.+82     	; 0x8a8 <__vector_10+0xc0>
		// Stop PWM
		TCA0.SINGLE.CTRLA &= ~TCA_SINGLE_ENABLE_bm;
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	9a e0       	ldi	r25, 0x0A	; 10
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	3a e0       	ldi	r19, 0x0A	; 10
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	2e 7f       	andi	r18, 0xFE	; 254
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
		// Change PB01 to value of direction
		if (direction) PORTB.OUTSET = PIN1_bm;
     868:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <direction>
     86c:	90 91 23 3e 	lds	r25, 0x3E23	; 0x803e23 <direction+0x1>
     870:	a0 91 24 3e 	lds	r26, 0x3E24	; 0x803e24 <direction+0x2>
     874:	b0 91 25 3e 	lds	r27, 0x3E25	; 0x803e25 <direction+0x3>
     878:	89 2b       	or	r24, r25
     87a:	8a 2b       	or	r24, r26
     87c:	8b 2b       	or	r24, r27
     87e:	31 f0       	breq	.+12     	; 0x88c <__vector_10+0xa4>
     880:	80 e2       	ldi	r24, 0x20	; 32
     882:	94 e0       	ldi	r25, 0x04	; 4
     884:	22 e0       	ldi	r18, 0x02	; 2
     886:	fc 01       	movw	r30, r24
     888:	25 83       	std	Z+5, r18	; 0x05
     88a:	05 c0       	rjmp	.+10     	; 0x896 <__vector_10+0xae>
		else PORTB.OUTCLR = PIN1_bm;
     88c:	80 e2       	ldi	r24, 0x20	; 32
     88e:	94 e0       	ldi	r25, 0x04	; 4
     890:	22 e0       	ldi	r18, 0x02	; 2
     892:	fc 01       	movw	r30, r24
     894:	26 83       	std	Z+6, r18	; 0x06
		// Restart PWM
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	9a e0       	ldi	r25, 0x0A	; 10
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	3a e0       	ldi	r19, 0x0A	; 10
     89e:	f9 01       	movw	r30, r18
     8a0:	20 81       	ld	r18, Z
     8a2:	21 60       	ori	r18, 0x01	; 1
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
	}
	prev_dir = direction;
     8a8:	80 91 22 3e 	lds	r24, 0x3E22	; 0x803e22 <direction>
     8ac:	90 91 23 3e 	lds	r25, 0x3E23	; 0x803e23 <direction+0x1>
     8b0:	a0 91 24 3e 	lds	r26, 0x3E24	; 0x803e24 <direction+0x2>
     8b4:	b0 91 25 3e 	lds	r27, 0x3E25	; 0x803e25 <direction+0x3>
     8b8:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <prev_dir>
     8bc:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <prev_dir+0x1>
     8c0:	a0 93 16 3e 	sts	0x3E16, r26	; 0x803e16 <prev_dir+0x2>
     8c4:	b0 93 17 3e 	sts	0x3E17, r27	; 0x803e17 <prev_dir+0x3>
}
     8c8:	00 00       	nop
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	5f 91       	pop	r21
     8dc:	4f 91       	pop	r20
     8de:	3f 91       	pop	r19
     8e0:	2f 91       	pop	r18
     8e2:	0f 90       	pop	r0
     8e4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_13>:
//
ISR(TCB0_INT_vect) {
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	2f 93       	push	r18
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	ef 93       	push	r30
     902:	ff 93       	push	r31
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	TCB0.INTFLAGS = TCB_CAPT_bm;
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	9a e0       	ldi	r25, 0x0A	; 10
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	fc 01       	movw	r30, r24
     914:	26 83       	std	Z+6, r18	; 0x06
	loop = 1;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	80 93 0e 3e 	sts	0x3E0E, r24	; 0x803e0e <loop>
     91e:	90 93 0f 3e 	sts	0x3E0F, r25	; 0x803e0f <loop+0x1>
}
     922:	00 00       	nop
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <__vector_23>:
//
ISR(USART0_DRE_vect) {
     93e:	1f 92       	push	r1
     940:	0f 92       	push	r0
     942:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
     946:	0f 92       	push	r0
     948:	11 24       	eor	r1, r1
     94a:	2f 93       	push	r18
     94c:	3f 93       	push	r19
     94e:	4f 93       	push	r20
     950:	5f 93       	push	r21
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	ef 93       	push	r30
     95c:	ff 93       	push	r31
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
	PORTB.OUTSET = PIN5_bm;
     966:	80 e2       	ldi	r24, 0x20	; 32
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	20 e2       	ldi	r18, 0x20	; 32
     96c:	fc 01       	movw	r30, r24
     96e:	25 83       	std	Z+5, r18	; 0x05

	usart_idx++;
     970:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <usart_idx>
     974:	90 91 2d 3e 	lds	r25, 0x3E2D	; 0x803e2d <usart_idx+0x1>
     978:	a0 91 2e 3e 	lds	r26, 0x3E2E	; 0x803e2e <usart_idx+0x2>
     97c:	b0 91 2f 3e 	lds	r27, 0x3E2F	; 0x803e2f <usart_idx+0x3>
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	a1 1d       	adc	r26, r1
     984:	b1 1d       	adc	r27, r1
     986:	80 93 2c 3e 	sts	0x3E2C, r24	; 0x803e2c <usart_idx>
     98a:	90 93 2d 3e 	sts	0x3E2D, r25	; 0x803e2d <usart_idx+0x1>
     98e:	a0 93 2e 3e 	sts	0x3E2E, r26	; 0x803e2e <usart_idx+0x2>
     992:	b0 93 2f 3e 	sts	0x3E2F, r27	; 0x803e2f <usart_idx+0x3>
	if (usart_idx == usart_send_length) USART0.CTRLA &= ~USART_DREIE_bm;
     996:	20 91 2c 3e 	lds	r18, 0x3E2C	; 0x803e2c <usart_idx>
     99a:	30 91 2d 3e 	lds	r19, 0x3E2D	; 0x803e2d <usart_idx+0x1>
     99e:	40 91 2e 3e 	lds	r20, 0x3E2E	; 0x803e2e <usart_idx+0x2>
     9a2:	50 91 2f 3e 	lds	r21, 0x3E2F	; 0x803e2f <usart_idx+0x3>
     9a6:	80 91 26 3e 	lds	r24, 0x3E26	; 0x803e26 <usart_send_length>
     9aa:	90 91 27 3e 	lds	r25, 0x3E27	; 0x803e27 <usart_send_length+0x1>
     9ae:	a0 91 28 3e 	lds	r26, 0x3E28	; 0x803e28 <usart_send_length+0x2>
     9b2:	b0 91 29 3e 	lds	r27, 0x3E29	; 0x803e29 <usart_send_length+0x3>
     9b6:	28 17       	cp	r18, r24
     9b8:	39 07       	cpc	r19, r25
     9ba:	4a 07       	cpc	r20, r26
     9bc:	5b 07       	cpc	r21, r27
     9be:	49 f4       	brne	.+18     	; 0x9d2 <__vector_23+0x94>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	98 e0       	ldi	r25, 0x08	; 8
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	38 e0       	ldi	r19, 0x08	; 8
     9c8:	f9 01       	movw	r30, r18
     9ca:	25 81       	ldd	r18, Z+5	; 0x05
     9cc:	2f 7d       	andi	r18, 0xDF	; 223
     9ce:	fc 01       	movw	r30, r24
     9d0:	25 83       	std	Z+5, r18	; 0x05
	while(!(USART0.STATUS & USART_DREIF_bm));
     9d2:	00 00       	nop
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	98 e0       	ldi	r25, 0x08	; 8
     9d8:	fc 01       	movw	r30, r24
     9da:	84 81       	ldd	r24, Z+4	; 0x04
     9dc:	88 2f       	mov	r24, r24
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	80 72       	andi	r24, 0x20	; 32
     9e2:	99 27       	eor	r25, r25
     9e4:	89 2b       	or	r24, r25
     9e6:	b1 f3       	breq	.-20     	; 0x9d4 <__vector_23+0x96>
	USART0.TXDATAL = usart_send_buffer[usart_idx];
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	38 e0       	ldi	r19, 0x08	; 8
     9ec:	80 91 2c 3e 	lds	r24, 0x3E2C	; 0x803e2c <usart_idx>
     9f0:	90 91 2d 3e 	lds	r25, 0x3E2D	; 0x803e2d <usart_idx+0x1>
     9f4:	a0 91 2e 3e 	lds	r26, 0x3E2E	; 0x803e2e <usart_idx+0x2>
     9f8:	b0 91 2f 3e 	lds	r27, 0x3E2F	; 0x803e2f <usart_idx+0x3>
     9fc:	80 5f       	subi	r24, 0xF0	; 240
     9fe:	91 4c       	sbci	r25, 0xC1	; 193
     a00:	fc 01       	movw	r30, r24
     a02:	80 81       	ld	r24, Z
     a04:	f9 01       	movw	r30, r18
     a06:	82 83       	std	Z+2, r24	; 0x02

	PORTB.OUTCLR = PIN5_bm;
     a08:	80 e2       	ldi	r24, 0x20	; 32
     a0a:	94 e0       	ldi	r25, 0x04	; 4
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	fc 01       	movw	r30, r24
     a10:	26 83       	std	Z+6, r18	; 0x06
}
     a12:	00 00       	nop
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     a40:	80 e0       	ldi	r24, 0x00	; 0
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <ccp_write_io+0x6>
     a4e:	1f 92       	push	r1
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	9a 83       	std	Y+2, r25	; 0x02
     a58:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	9a 81       	ldd	r25, Y+2	; 0x02
     a5e:	4b 81       	ldd	r20, Y+3	; 0x03
     a60:	68 ed       	ldi	r22, 0xD8	; 216
     a62:	c0 d2       	rcall	.+1408   	; 0xfe4 <protected_write_io>
}
     a64:	00 00       	nop
     a66:	23 96       	adiw	r28, 0x03	; 3
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
     a7a:	60 e1       	ldi	r22, 0x10	; 16
     a7c:	81 e6       	ldi	r24, 0x61	; 97
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	e3 df       	rcall	.-58     	; 0xa48 <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     a82:	80 e0       	ldi	r24, 0x00	; 0
}
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     a92:	80 e0       	ldi	r24, 0x00	; 0
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <PORTA_set_pin_pull_mode+0x6>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <PORTA_set_pin_pull_mode+0x8>
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	88 2f       	mov	r24, r24
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	80 5f       	subi	r24, 0xF0	; 240
     ab2:	9b 4f       	sbci	r25, 0xFB	; 251
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     ab8:	8c 81       	ldd	r24, Y+4	; 0x04
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	59 f4       	brne	.+22     	; 0xad4 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	28 2f       	mov	r18, r24
     ac8:	28 60       	ori	r18, 0x08	; 8
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
     ad2:	0d c0       	rjmp	.+26     	; 0xaee <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
     ad4:	8c 81       	ldd	r24, Y+4	; 0x04
     ad6:	88 23       	and	r24, r24
     ad8:	51 f4       	brne	.+20     	; 0xaee <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	28 2f       	mov	r18, r24
     ae4:	27 7f       	andi	r18, 0xF7	; 247
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
	}
}
     aee:	00 00       	nop
     af0:	24 96       	adiw	r28, 0x04	; 4
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	00 d0       	rcall	.+0      	; 0xb02 <PORTA_set_pin_dir+0x6>
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	88 2f       	mov	r24, r24
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	91 05       	cpc	r25, r1
     b14:	e1 f0       	breq	.+56     	; 0xb4e <PORTA_set_pin_dir+0x52>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	91 05       	cpc	r25, r1
     b1a:	71 f1       	breq	.+92     	; 0xb78 <PORTA_set_pin_dir+0x7c>
     b1c:	89 2b       	or	r24, r25
     b1e:	09 f0       	breq	.+2      	; 0xb22 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     b20:	3b c0       	rjmp	.+118    	; 0xb98 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	fc 01       	movw	r30, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	68 2f       	mov	r22, r24
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	48 2f       	mov	r20, r24
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <PORTA_set_pin_dir+0x44>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	4a 95       	dec	r20
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <PORTA_set_pin_dir+0x40>
     b44:	80 95       	com	r24
     b46:	86 23       	and	r24, r22
     b48:	f9 01       	movw	r30, r18
     b4a:	80 83       	st	Z, r24
		break;
     b4c:	25 c0       	rjmp	.+74     	; 0xb98 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	fc 01       	movw	r30, r24
     b58:	80 81       	ld	r24, Z
     b5a:	68 2f       	mov	r22, r24
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	48 2f       	mov	r20, r24
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <PORTA_set_pin_dir+0x70>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	4a 95       	dec	r20
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <PORTA_set_pin_dir+0x6c>
     b70:	86 2b       	or	r24, r22
     b72:	f9 01       	movw	r30, r18
     b74:	80 83       	st	Z, r24
		break;
     b76:	10 c0       	rjmp	.+32     	; 0xb98 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	80 5f       	subi	r24, 0xF0	; 240
     b80:	9b 4f       	sbci	r25, 0xFB	; 251
     b82:	29 81       	ldd	r18, Y+1	; 0x01
     b84:	22 2f       	mov	r18, r18
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	20 5f       	subi	r18, 0xF0	; 240
     b8a:	3b 4f       	sbci	r19, 0xFB	; 251
     b8c:	f9 01       	movw	r30, r18
     b8e:	20 81       	ld	r18, Z
     b90:	28 60       	ori	r18, 0x08	; 8
     b92:	fc 01       	movw	r30, r24
     b94:	20 83       	st	Z, r18
		break;
     b96:	00 00       	nop
	default:
		break;
	}
}
     b98:	00 00       	nop
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <PORTA_set_pin_level+0x6>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	88 23       	and	r24, r24
     bb6:	a9 f0       	breq	.+42     	; 0xbe2 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	fc 01       	movw	r30, r24
     bc2:	81 81       	ldd	r24, Z+1	; 0x01
     bc4:	68 2f       	mov	r22, r24
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	48 2f       	mov	r20, r24
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <PORTA_set_pin_level+0x32>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	4a 95       	dec	r20
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <PORTA_set_pin_level+0x2e>
     bda:	86 2b       	or	r24, r22
     bdc:	f9 01       	movw	r30, r18
     bde:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     be0:	15 c0       	rjmp	.+42     	; 0xc0c <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	fc 01       	movw	r30, r24
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	68 2f       	mov	r22, r24
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	48 2f       	mov	r20, r24
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <PORTA_set_pin_level+0x5c>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	4a 95       	dec	r20
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <PORTA_set_pin_level+0x58>
     c04:	80 95       	com	r24
     c06:	86 23       	and	r24, r22
     c08:	f9 01       	movw	r30, r18
     c0a:	81 83       	std	Z+1, r24	; 0x01
	}
}
     c0c:	00 00       	nop
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <PORTB_set_pin_pull_mode+0x6>
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <PORTB_set_pin_pull_mode+0x8>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	8b 83       	std	Y+3, r24	; 0x03
     c26:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
     c28:	8b 81       	ldd	r24, Y+3	; 0x03
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	80 5d       	subi	r24, 0xD0	; 208
     c30:	9b 4f       	sbci	r25, 0xFB	; 251
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     c36:	8c 81       	ldd	r24, Y+4	; 0x04
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	59 f4       	brne	.+22     	; 0xc52 <PORTB_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	fc 01       	movw	r30, r24
     c42:	80 81       	ld	r24, Z
     c44:	28 2f       	mov	r18, r24
     c46:	28 60       	ori	r18, 0x08	; 8
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
     c50:	0d c0       	rjmp	.+26     	; 0xc6c <PORTB_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	88 23       	and	r24, r24
     c56:	51 f4       	brne	.+20     	; 0xc6c <PORTB_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	fc 01       	movw	r30, r24
     c5e:	80 81       	ld	r24, Z
     c60:	28 2f       	mov	r18, r24
     c62:	27 7f       	andi	r18, 0xF7	; 247
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
	}
}
     c6c:	00 00       	nop
     c6e:	24 96       	adiw	r28, 0x04	; 4
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <PORTB_set_pin_dir+0x6>
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	91 05       	cpc	r25, r1
     c92:	e1 f0       	breq	.+56     	; 0xccc <PORTB_set_pin_dir+0x52>
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	91 05       	cpc	r25, r1
     c98:	71 f1       	breq	.+92     	; 0xcf6 <PORTB_set_pin_dir+0x7c>
     c9a:	89 2b       	or	r24, r25
     c9c:	09 f0       	breq	.+2      	; 0xca0 <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     c9e:	3b c0       	rjmp	.+118    	; 0xd16 <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	24 e0       	ldi	r18, 0x04	; 4
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	f9 01       	movw	r30, r18
     caa:	20 81       	ld	r18, Z
     cac:	62 2f       	mov	r22, r18
     cae:	29 81       	ldd	r18, Y+1	; 0x01
     cb0:	42 2f       	mov	r20, r18
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	21 e0       	ldi	r18, 0x01	; 1
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <PORTB_set_pin_dir+0x44>
     cba:	22 0f       	add	r18, r18
     cbc:	33 1f       	adc	r19, r19
     cbe:	4a 95       	dec	r20
     cc0:	e2 f7       	brpl	.-8      	; 0xcba <PORTB_set_pin_dir+0x40>
     cc2:	20 95       	com	r18
     cc4:	26 23       	and	r18, r22
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
		break;
     cca:	25 c0       	rjmp	.+74     	; 0xd16 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	24 e0       	ldi	r18, 0x04	; 4
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	62 2f       	mov	r22, r18
     cda:	29 81       	ldd	r18, Y+1	; 0x01
     cdc:	42 2f       	mov	r20, r18
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <PORTB_set_pin_dir+0x70>
     ce6:	22 0f       	add	r18, r18
     ce8:	33 1f       	adc	r19, r19
     cea:	4a 95       	dec	r20
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <PORTB_set_pin_dir+0x6c>
     cee:	26 2b       	or	r18, r22
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
		break;
     cf4:	10 c0       	rjmp	.+32     	; 0xd16 <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	80 5d       	subi	r24, 0xD0	; 208
     cfe:	9b 4f       	sbci	r25, 0xFB	; 251
     d00:	29 81       	ldd	r18, Y+1	; 0x01
     d02:	22 2f       	mov	r18, r18
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	20 5d       	subi	r18, 0xD0	; 208
     d08:	3b 4f       	sbci	r19, 0xFB	; 251
     d0a:	f9 01       	movw	r30, r18
     d0c:	20 81       	ld	r18, Z
     d0e:	28 60       	ori	r18, 0x08	; 8
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
		break;
     d14:	00 00       	nop
	default:
		break;
	}
}
     d16:	00 00       	nop
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	00 d0       	rcall	.+0      	; 0xd28 <PORTB_set_pin_level+0x6>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 23       	and	r24, r24
     d34:	a9 f0       	breq	.+42     	; 0xd60 <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	24 e0       	ldi	r18, 0x04	; 4
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	f9 01       	movw	r30, r18
     d40:	21 81       	ldd	r18, Z+1	; 0x01
     d42:	62 2f       	mov	r22, r18
     d44:	29 81       	ldd	r18, Y+1	; 0x01
     d46:	42 2f       	mov	r20, r18
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <PORTB_set_pin_level+0x32>
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	4a 95       	dec	r20
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <PORTB_set_pin_level+0x2e>
     d58:	26 2b       	or	r18, r22
     d5a:	fc 01       	movw	r30, r24
     d5c:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     d60:	84 e0       	ldi	r24, 0x04	; 4
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	24 e0       	ldi	r18, 0x04	; 4
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	f9 01       	movw	r30, r18
     d6a:	21 81       	ldd	r18, Z+1	; 0x01
     d6c:	62 2f       	mov	r22, r18
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	42 2f       	mov	r20, r18
     d72:	50 e0       	ldi	r21, 0x00	; 0
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <PORTB_set_pin_level+0x5c>
     d7a:	22 0f       	add	r18, r18
     d7c:	33 1f       	adc	r19, r19
     d7e:	4a 95       	dec	r20
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <PORTB_set_pin_level+0x58>
     d82:	20 95       	com	r18
     d84:	26 23       	and	r18, r22
     d86:	fc 01       	movw	r30, r24
     d88:	21 83       	std	Z+1, r18	; 0x01
	}
}
     d8a:	00 00       	nop
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <PA1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA1_set_dir(const enum port_dir dir)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	1f 92       	push	r1
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(1, dir);
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	aa de       	rcall	.-684    	; 0xafc <PORTA_set_pin_dir>
}
     da8:	00 00       	nop
     daa:	0f 90       	pop	r0
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <PA1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA1_set_level(const bool level)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	1f 92       	push	r1
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(1, level);
     dbe:	69 81       	ldd	r22, Y+1	; 0x01
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	f0 de       	rcall	.-544    	; 0xba4 <PORTA_set_pin_level>
}
     dc4:	00 00       	nop
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <PA2_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA2_set_pull_mode(const enum port_pull_mode pull_mode)
{
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	1f 92       	push	r1
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(2, pull_mode);
     dda:	69 81       	ldd	r22, Y+1	; 0x01
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	5d de       	rcall	.-838    	; 0xa9a <PORTA_set_pin_pull_mode>
}
     de0:	00 00       	nop
     de2:	0f 90       	pop	r0
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	1f 92       	push	r1
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
     df6:	69 81       	ldd	r22, Y+1	; 0x01
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	80 de       	rcall	.-768    	; 0xafc <PORTA_set_pin_dir>
}
     dfc:	00 00       	nop
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <PA3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA3_set_dir(const enum port_dir dir)
{
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	1f 92       	push	r1
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
     e12:	69 81       	ldd	r22, Y+1	; 0x01
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	72 de       	rcall	.-796    	; 0xafc <PORTA_set_pin_dir>
}
     e18:	00 00       	nop
     e1a:	0f 90       	pop	r0
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <PA3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA3_set_level(const bool level)
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	1f 92       	push	r1
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
     e2e:	69 81       	ldd	r22, Y+1	; 0x01
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	b8 de       	rcall	.-656    	; 0xba4 <PORTA_set_pin_level>
}
     e34:	00 00       	nop
     e36:	0f 90       	pop	r0
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <PB2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB2_set_dir(const enum port_dir dir)
{
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	1f 92       	push	r1
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(2, dir);
     e4a:	69 81       	ldd	r22, Y+1	; 0x01
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	15 df       	rcall	.-470    	; 0xc7a <PORTB_set_pin_dir>
}
     e50:	00 00       	nop
     e52:	0f 90       	pop	r0
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <PB2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PB2_set_level(const bool level)
{
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	1f 92       	push	r1
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
     e64:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(2, level);
     e66:	69 81       	ldd	r22, Y+1	; 0x01
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	5b df       	rcall	.-330    	; 0xd22 <PORTB_set_pin_level>
}
     e6c:	00 00       	nop
     e6e:	0f 90       	pop	r0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	08 95       	ret

00000e76 <PB3_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PB3_set_pull_mode(const enum port_pull_mode pull_mode)
{
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	1f 92       	push	r1
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(3, pull_mode);
     e82:	69 81       	ldd	r22, Y+1	; 0x01
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	c8 de       	rcall	.-624    	; 0xc18 <PORTB_set_pin_pull_mode>
}
     e88:	00 00       	nop
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <PB3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB3_set_dir(const enum port_dir dir)
{
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	1f 92       	push	r1
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(3, dir);
     e9e:	69 81       	ldd	r22, Y+1	; 0x01
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	eb de       	rcall	.-554    	; 0xc7a <PORTB_set_pin_dir>
}
     ea4:	00 00       	nop
     ea6:	0f 90       	pop	r0
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <mcu_init+0x6>
     eb4:	1f 92       	push	r1
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	12 c0       	rjmp	.+36     	; 0xee2 <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	80 5f       	subi	r24, 0xF0	; 240
     ec6:	9b 4f       	sbci	r25, 0xFB	; 251
     ec8:	29 81       	ldd	r18, Y+1	; 0x01
     eca:	22 2f       	mov	r18, r18
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	20 5f       	subi	r18, 0xF0	; 240
     ed0:	3b 4f       	sbci	r19, 0xFB	; 251
     ed2:	f9 01       	movw	r30, r18
     ed4:	20 81       	ld	r18, Z
     ed6:	28 60       	ori	r18, 0x08	; 8
     ed8:	fc 01       	movw	r30, r24
     eda:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	88 30       	cpi	r24, 0x08	; 8
     ee6:	58 f3       	brcs	.-42     	; 0xebe <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ee8:	1a 82       	std	Y+2, r1	; 0x02
     eea:	12 c0       	rjmp	.+36     	; 0xf10 <mcu_init+0x62>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	80 5d       	subi	r24, 0xD0	; 208
     ef4:	9b 4f       	sbci	r25, 0xFB	; 251
     ef6:	2a 81       	ldd	r18, Y+2	; 0x02
     ef8:	22 2f       	mov	r18, r18
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	20 5d       	subi	r18, 0xD0	; 208
     efe:	3b 4f       	sbci	r19, 0xFB	; 251
     f00:	f9 01       	movw	r30, r18
     f02:	20 81       	ld	r18, Z
     f04:	28 60       	ori	r18, 0x08	; 8
     f06:	fc 01       	movw	r30, r24
     f08:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	8a 83       	std	Y+2, r24	; 0x02
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	88 30       	cpi	r24, 0x08	; 8
     f14:	58 f3       	brcs	.-42     	; 0xeec <mcu_init+0x3e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f16:	1b 82       	std	Y+3, r1	; 0x03
     f18:	12 c0       	rjmp	.+36     	; 0xf3e <mcu_init+0x90>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	80 5b       	subi	r24, 0xB0	; 176
     f22:	9b 4f       	sbci	r25, 0xFB	; 251
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	22 2f       	mov	r18, r18
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	20 5b       	subi	r18, 0xB0	; 176
     f2c:	3b 4f       	sbci	r19, 0xFB	; 251
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	28 60       	ori	r18, 0x08	; 8
     f34:	fc 01       	movw	r30, r24
     f36:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 30       	cpi	r24, 0x08	; 8
     f42:	58 f3       	brcs	.-42     	; 0xf1a <mcu_init+0x6c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     f44:	00 00       	nop
     f46:	23 96       	adiw	r28, 0x03	; 3
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <USART_0_initialization>:
#include "driver_init.h"
#include <system.h>

/* configure the pins and initialize the registers */
void USART_0_initialization(void)
{
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PB3_set_dir(PORT_DIR_IN);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	9a df       	rcall	.-204    	; 0xe92 <PB3_set_dir>

	PB3_set_pull_mode(
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	8a df       	rcall	.-236    	; 0xe76 <PB3_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PB2_set_dir(PORT_DIR_OUT);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	6c df       	rcall	.-296    	; 0xe3e <PB2_set_dir>

	PB2_set_level(
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	78 df       	rcall	.-272    	; 0xe5a <PB2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
     f6a:	17 d1       	rcall	.+558    	; 0x119a <USART_0_init>
}
     f6c:	00 00       	nop
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <PWM_0_initialization>:

void PWM_0_initialization(void)
{
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62

	PWM_0_init();
     f7c:	37 d0       	rcall	.+110    	; 0xfec <PWM_0_init>
}
     f7e:	00 00       	nop
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <TIMER_0_initialization>:

void TIMER_0_initialization(void)
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62

	TIMER_0_init();
     f8e:	fd d0       	rcall	.+506    	; 0x118a <TIMER_0_init>
}
     f90:	00 00       	nop
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <SPI_0_initialization>:

/* configure the pins and initialize the registers */
void SPI_0_initialization(void)
{
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PA2_set_dir(PORT_DIR_IN);
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	23 df       	rcall	.-442    	; 0xdea <PA2_set_dir>

	PA2_set_pull_mode(
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	13 df       	rcall	.-474    	; 0xdce <PA2_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PA1_set_dir(PORT_DIR_OUT);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	f5 de       	rcall	.-534    	; 0xd96 <PA1_set_dir>

	PA1_set_level(
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	01 df       	rcall	.-510    	; 0xdb2 <PA1_set_level>
	    // <false"> Low
	    // <true"> High
	    false);

	// Set pin direction to output
	PA3_set_dir(PORT_DIR_OUT);
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	29 df       	rcall	.-430    	; 0xe06 <PA3_set_dir>

	PA3_set_level(
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	35 df       	rcall	.-406    	; 0xe22 <PA3_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
     fb8:	5a d0       	rcall	.+180    	; 0x106e <SPI_0_init>
}
     fba:	00 00       	nop
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	08 95       	ret

00000fc2 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
     fca:	71 df       	rcall	.-286    	; 0xeae <mcu_init>

	CLKCTRL_init();
     fcc:	52 dd       	rcall	.-1372   	; 0xa72 <CLKCTRL_init>

	USART_0_initialization();
     fce:	c1 df       	rcall	.-126    	; 0xf52 <USART_0_initialization>

	PWM_0_initialization();
     fd0:	d1 df       	rcall	.-94     	; 0xf74 <PWM_0_initialization>

	TIMER_0_initialization();
     fd2:	d9 df       	rcall	.-78     	; 0xf86 <TIMER_0_initialization>

	SPI_0_initialization();
     fd4:	e1 df       	rcall	.-62     	; 0xf98 <SPI_0_initialization>

	CPUINT_init();
     fd6:	59 dd       	rcall	.-1358   	; 0xa8a <CPUINT_init>

	SLPCTRL_init();
     fd8:	42 d0       	rcall	.+132    	; 0x105e <SLPCTRL_init>

	BOD_init();
     fda:	2e dd       	rcall	.-1444   	; 0xa38 <BOD_init>
}
     fdc:	00 00       	nop
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     fe4:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     fe6:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     fe8:	40 83       	st	Z, r20
	ret                             // Return to caller
     fea:	08 95       	ret

00000fec <PWM_0_init>:
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
}
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	9a e0       	ldi	r25, 0x0A	; 10
     ff8:	25 e0       	ldi	r18, 0x05	; 5
     ffa:	fc 01       	movw	r30, r24
     ffc:	21 83       	std	Z+1, r18	; 0x01
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	9a e0       	ldi	r25, 0x0A	; 10
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <__vector_8>:

ISR(TCA0_OVF_vect)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
    101c:	2f 93       	push	r18
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	9a e0       	ldi	r25, 0x0A	; 10
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	fc 01       	movw	r30, r24
    1036:	23 87       	std	Z+11, r18	; 0x0b

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
    1038:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <callback_count.3348>
    103c:	8f 5f       	subi	r24, 0xFF	; 255
    103e:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <callback_count.3348>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
    1042:	00 00       	nop
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    1066:	80 e0       	ldi	r24, 0x00	; 0
}
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <SPI_0_init>:
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
}
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	80 e2       	ldi	r24, 0x20	; 32
    1078:	98 e0       	ldi	r25, 0x08	; 8
    107a:	21 e2       	ldi	r18, 0x21	; 33
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
    1080:	80 e2       	ldi	r24, 0x20	; 32
    1082:	98 e0       	ldi	r25, 0x08	; 8
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	fc 01       	movw	r30, r24
    1088:	22 83       	std	Z+2, r18	; 0x02
    108a:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <SPI_0_desc>
    108e:	10 92 0a 3e 	sts	0x3E0A, r1	; 0x803e0a <SPI_0_desc+0x5>
    1092:	10 92 0b 3e 	sts	0x3E0B, r1	; 0x803e0b <SPI_0_desc+0x6>
    1096:	00 00       	nop
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <__vector_21>:

ISR(SPI0_INT_vect)
{
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <__vector_21+0x2a>
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPI0.DATA;
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	98 e0       	ldi	r25, 0x08	; 8
    10d0:	fc 01       	movw	r30, r24
    10d2:	84 81       	ldd	r24, Z+4	; 0x04
    10d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t wdata = 0;
    10d6:	19 82       	std	Y+1, r1	; 0x01

	SPI0.INTFLAGS = SPI_RXCIF_bm;
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	98 e0       	ldi	r25, 0x08	; 8
    10dc:	20 e8       	ldi	r18, 0x80	; 128
    10de:	fc 01       	movw	r30, r24
    10e0:	23 83       	std	Z+3, r18	; 0x03

	if (SPI_0_desc.type != SPI_WRITE) {
    10e2:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <SPI_0_desc+0x4>
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <__vector_21+0x5a>
		*SPI_0_desc.data = rdata;
    10ea:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <SPI_0_desc+0x1>
    10ee:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <SPI_0_desc+0x2>
    10f2:	2a 81       	ldd	r18, Y+2	; 0x02
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18
	}

	SPI_0_desc.data++;
    10f8:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <SPI_0_desc+0x1>
    10fc:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <SPI_0_desc+0x2>
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	80 93 06 3e 	sts	0x3E06, r24	; 0x803e06 <SPI_0_desc+0x1>
    1106:	90 93 07 3e 	sts	0x3E07, r25	; 0x803e07 <SPI_0_desc+0x2>

	if (SPI_0_desc.type != SPI_READ)
    110a:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <SPI_0_desc+0x4>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	39 f0       	breq	.+14     	; 0x1120 <__vector_21+0x82>
		wdata = *SPI_0_desc.data;
    1112:	80 91 06 3e 	lds	r24, 0x3E06	; 0x803e06 <SPI_0_desc+0x1>
    1116:	90 91 07 3e 	lds	r25, 0x3E07	; 0x803e07 <SPI_0_desc+0x2>
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	89 83       	std	Y+1, r24	; 0x01

	SPI_0_desc.size--;
    1120:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <SPI_0_desc+0x3>
    1124:	81 50       	subi	r24, 0x01	; 1
    1126:	80 93 08 3e 	sts	0x3E08, r24	; 0x803e08 <SPI_0_desc+0x3>
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
    112a:	80 91 08 3e 	lds	r24, 0x3E08	; 0x803e08 <SPI_0_desc+0x3>
    112e:	88 23       	and	r24, r24
    1130:	31 f0       	breq	.+12     	; 0x113e <__vector_21+0xa0>
		// more data to send, send a byte
		SPI0.DATA = wdata;
    1132:	80 e2       	ldi	r24, 0x20	; 32
    1134:	98 e0       	ldi	r25, 0x08	; 8
    1136:	29 81       	ldd	r18, Y+1	; 0x01
    1138:	fc 01       	movw	r30, r24
    113a:	24 83       	std	Z+4, r18	; 0x04
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
    113c:	0f c0       	rjmp	.+30     	; 0x115c <__vector_21+0xbe>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <SPI_0_desc>
		if (SPI_0_desc.cb != NULL) {
    1144:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <SPI_0_desc+0x5>
    1148:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <SPI_0_desc+0x6>
    114c:	89 2b       	or	r24, r25
    114e:	31 f0       	breq	.+12     	; 0x115c <__vector_21+0xbe>
			SPI_0_desc.cb();
    1150:	80 91 0a 3e 	lds	r24, 0x3E0A	; 0x803e0a <SPI_0_desc+0x5>
    1154:	90 91 0b 3e 	lds	r25, 0x3E0B	; 0x803e0b <SPI_0_desc+0x6>
    1158:	fc 01       	movw	r30, r24
    115a:	09 95       	icall
		}
	}
}
    115c:	00 00       	nop
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__RODATA_PM_OFFSET__+0x7f803f>
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <TIMER_0_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
	// TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc /* CLK_PER (No Prescaling) */
	//		 | 0 << TCB_ENABLE_bp /* Enable: disabled */
	//		 | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
    1192:	80 e0       	ldi	r24, 0x00	; 0
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <USART_0_init>:
 * \return Initialization status.
 * \retval 0 the USART init was successful
 * \retval 1 the USART init was not successful
 */
int8_t USART_0_init()
{
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	98 e0       	ldi	r25, 0x08	; 8
    11a6:	2d e8       	ldi	r18, 0x8D	; 141
    11a8:	30 e2       	ldi	r19, 0x20	; 32
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 87       	std	Z+8, r18	; 0x08
    11ae:	31 87       	std	Z+9, r19	; 0x09
	//		 | USART_RS485_OFF_gc /* RS485 Mode disabled */
	//		 | 0 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
	//		 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	98 e0       	ldi	r25, 0x08	; 8
    11b4:	20 ec       	ldi	r18, 0xC0	; 192
    11b6:	fc 01       	movw	r30, r24
    11b8:	26 83       	std	Z+6, r18	; 0x06

	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Length: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
    11ba:	80 e0       	ldi	r24, 0x00	; 0
}
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	08 95       	ret

000011c2 <__fixsfsi>:
    11c2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fixunssfsi>
    11c6:	68 94       	set
    11c8:	b1 11       	cpse	r27, r1
    11ca:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__fp_szero>
    11ce:	08 95       	ret

000011d0 <__fixunssfsi>:
    11d0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__fp_splitA>
    11d4:	88 f0       	brcs	.+34     	; 0x11f8 <__fixunssfsi+0x28>
    11d6:	9f 57       	subi	r25, 0x7F	; 127
    11d8:	98 f0       	brcs	.+38     	; 0x1200 <__fixunssfsi+0x30>
    11da:	b9 2f       	mov	r27, r25
    11dc:	99 27       	eor	r25, r25
    11de:	b7 51       	subi	r27, 0x17	; 23
    11e0:	b0 f0       	brcs	.+44     	; 0x120e <__fixunssfsi+0x3e>
    11e2:	e1 f0       	breq	.+56     	; 0x121c <__fixunssfsi+0x4c>
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	1a f0       	brmi	.+6      	; 0x11f4 <__fixunssfsi+0x24>
    11ee:	ba 95       	dec	r27
    11f0:	c9 f7       	brne	.-14     	; 0x11e4 <__fixunssfsi+0x14>
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <__fixunssfsi+0x4c>
    11f4:	b1 30       	cpi	r27, 0x01	; 1
    11f6:	91 f0       	breq	.+36     	; 0x121c <__fixunssfsi+0x4c>
    11f8:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_zero>
    11fc:	b1 e0       	ldi	r27, 0x01	; 1
    11fe:	08 95       	ret
    1200:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__fp_zero>
    1204:	67 2f       	mov	r22, r23
    1206:	78 2f       	mov	r23, r24
    1208:	88 27       	eor	r24, r24
    120a:	b8 5f       	subi	r27, 0xF8	; 248
    120c:	39 f0       	breq	.+14     	; 0x121c <__fixunssfsi+0x4c>
    120e:	b9 3f       	cpi	r27, 0xF9	; 249
    1210:	cc f3       	brlt	.-14     	; 0x1204 <__fixunssfsi+0x34>
    1212:	86 95       	lsr	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b3 95       	inc	r27
    121a:	d9 f7       	brne	.-10     	; 0x1212 <__fixunssfsi+0x42>
    121c:	3e f4       	brtc	.+14     	; 0x122c <__fixunssfsi+0x5c>
    121e:	90 95       	com	r25
    1220:	80 95       	com	r24
    1222:	70 95       	com	r23
    1224:	61 95       	neg	r22
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	8f 4f       	sbci	r24, 0xFF	; 255
    122a:	9f 4f       	sbci	r25, 0xFF	; 255
    122c:	08 95       	ret

0000122e <__floatunsisf>:
    122e:	e8 94       	clt
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <__floatsisf+0x12>

00001232 <__floatsisf>:
    1232:	97 fb       	bst	r25, 7
    1234:	3e f4       	brtc	.+14     	; 0x1244 <__floatsisf+0x12>
    1236:	90 95       	com	r25
    1238:	80 95       	com	r24
    123a:	70 95       	com	r23
    123c:	61 95       	neg	r22
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	8f 4f       	sbci	r24, 0xFF	; 255
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	99 23       	and	r25, r25
    1246:	a9 f0       	breq	.+42     	; 0x1272 <__floatsisf+0x40>
    1248:	f9 2f       	mov	r31, r25
    124a:	96 e9       	ldi	r25, 0x96	; 150
    124c:	bb 27       	eor	r27, r27
    124e:	93 95       	inc	r25
    1250:	f6 95       	lsr	r31
    1252:	87 95       	ror	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	b7 95       	ror	r27
    125a:	f1 11       	cpse	r31, r1
    125c:	f8 cf       	rjmp	.-16     	; 0x124e <__floatsisf+0x1c>
    125e:	fa f4       	brpl	.+62     	; 0x129e <__floatsisf+0x6c>
    1260:	bb 0f       	add	r27, r27
    1262:	11 f4       	brne	.+4      	; 0x1268 <__floatsisf+0x36>
    1264:	60 ff       	sbrs	r22, 0
    1266:	1b c0       	rjmp	.+54     	; 0x129e <__floatsisf+0x6c>
    1268:	6f 5f       	subi	r22, 0xFF	; 255
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	16 c0       	rjmp	.+44     	; 0x129e <__floatsisf+0x6c>
    1272:	88 23       	and	r24, r24
    1274:	11 f0       	breq	.+4      	; 0x127a <__floatsisf+0x48>
    1276:	96 e9       	ldi	r25, 0x96	; 150
    1278:	11 c0       	rjmp	.+34     	; 0x129c <__floatsisf+0x6a>
    127a:	77 23       	and	r23, r23
    127c:	21 f0       	breq	.+8      	; 0x1286 <__floatsisf+0x54>
    127e:	9e e8       	ldi	r25, 0x8E	; 142
    1280:	87 2f       	mov	r24, r23
    1282:	76 2f       	mov	r23, r22
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <__floatsisf+0x5e>
    1286:	66 23       	and	r22, r22
    1288:	71 f0       	breq	.+28     	; 0x12a6 <__floatsisf+0x74>
    128a:	96 e8       	ldi	r25, 0x86	; 134
    128c:	86 2f       	mov	r24, r22
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	2a f0       	brmi	.+10     	; 0x129e <__floatsisf+0x6c>
    1294:	9a 95       	dec	r25
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	da f7       	brpl	.-10     	; 0x1294 <__floatsisf+0x62>
    129e:	88 0f       	add	r24, r24
    12a0:	96 95       	lsr	r25
    12a2:	87 95       	ror	r24
    12a4:	97 f9       	bld	r25, 7
    12a6:	08 95       	ret

000012a8 <__fp_split3>:
    12a8:	57 fd       	sbrc	r21, 7
    12aa:	90 58       	subi	r25, 0x80	; 128
    12ac:	44 0f       	add	r20, r20
    12ae:	55 1f       	adc	r21, r21
    12b0:	59 f0       	breq	.+22     	; 0x12c8 <__fp_splitA+0x10>
    12b2:	5f 3f       	cpi	r21, 0xFF	; 255
    12b4:	71 f0       	breq	.+28     	; 0x12d2 <__fp_splitA+0x1a>
    12b6:	47 95       	ror	r20

000012b8 <__fp_splitA>:
    12b8:	88 0f       	add	r24, r24
    12ba:	97 fb       	bst	r25, 7
    12bc:	99 1f       	adc	r25, r25
    12be:	61 f0       	breq	.+24     	; 0x12d8 <__fp_splitA+0x20>
    12c0:	9f 3f       	cpi	r25, 0xFF	; 255
    12c2:	79 f0       	breq	.+30     	; 0x12e2 <__fp_splitA+0x2a>
    12c4:	87 95       	ror	r24
    12c6:	08 95       	ret
    12c8:	12 16       	cp	r1, r18
    12ca:	13 06       	cpc	r1, r19
    12cc:	14 06       	cpc	r1, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	f2 cf       	rjmp	.-28     	; 0x12b6 <__fp_split3+0xe>
    12d2:	46 95       	lsr	r20
    12d4:	f1 df       	rcall	.-30     	; 0x12b8 <__fp_splitA>
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <__fp_splitA+0x30>
    12d8:	16 16       	cp	r1, r22
    12da:	17 06       	cpc	r1, r23
    12dc:	18 06       	cpc	r1, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	f1 cf       	rjmp	.-30     	; 0x12c4 <__fp_splitA+0xc>
    12e2:	86 95       	lsr	r24
    12e4:	71 05       	cpc	r23, r1
    12e6:	61 05       	cpc	r22, r1
    12e8:	08 94       	sec
    12ea:	08 95       	ret

000012ec <__fp_zero>:
    12ec:	e8 94       	clt

000012ee <__fp_szero>:
    12ee:	bb 27       	eor	r27, r27
    12f0:	66 27       	eor	r22, r22
    12f2:	77 27       	eor	r23, r23
    12f4:	cb 01       	movw	r24, r22
    12f6:	97 f9       	bld	r25, 7
    12f8:	08 95       	ret

000012fa <__gesf2>:
    12fa:	0e 94 82 09 	call	0x1304	; 0x1304 <__fp_cmp>
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <__gesf2+0x8>
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	08 95       	ret

00001304 <__fp_cmp>:
    1304:	99 0f       	add	r25, r25
    1306:	00 08       	sbc	r0, r0
    1308:	55 0f       	add	r21, r21
    130a:	aa 0b       	sbc	r26, r26
    130c:	e0 e8       	ldi	r30, 0x80	; 128
    130e:	fe ef       	ldi	r31, 0xFE	; 254
    1310:	16 16       	cp	r1, r22
    1312:	17 06       	cpc	r1, r23
    1314:	e8 07       	cpc	r30, r24
    1316:	f9 07       	cpc	r31, r25
    1318:	c0 f0       	brcs	.+48     	; 0x134a <__fp_cmp+0x46>
    131a:	12 16       	cp	r1, r18
    131c:	13 06       	cpc	r1, r19
    131e:	e4 07       	cpc	r30, r20
    1320:	f5 07       	cpc	r31, r21
    1322:	98 f0       	brcs	.+38     	; 0x134a <__fp_cmp+0x46>
    1324:	62 1b       	sub	r22, r18
    1326:	73 0b       	sbc	r23, r19
    1328:	84 0b       	sbc	r24, r20
    132a:	95 0b       	sbc	r25, r21
    132c:	39 f4       	brne	.+14     	; 0x133c <__fp_cmp+0x38>
    132e:	0a 26       	eor	r0, r26
    1330:	61 f0       	breq	.+24     	; 0x134a <__fp_cmp+0x46>
    1332:	23 2b       	or	r18, r19
    1334:	24 2b       	or	r18, r20
    1336:	25 2b       	or	r18, r21
    1338:	21 f4       	brne	.+8      	; 0x1342 <__fp_cmp+0x3e>
    133a:	08 95       	ret
    133c:	0a 26       	eor	r0, r26
    133e:	09 f4       	brne	.+2      	; 0x1342 <__fp_cmp+0x3e>
    1340:	a1 40       	sbci	r26, 0x01	; 1
    1342:	a6 95       	lsr	r26
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	81 1d       	adc	r24, r1
    1348:	81 1d       	adc	r24, r1
    134a:	08 95       	ret

0000134c <__mulsi3>:
    134c:	db 01       	movw	r26, r22
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	5c d0       	rcall	.+184    	; 0x140c <__muluhisi3>
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	a2 9f       	mul	r26, r18
    135a:	80 0d       	add	r24, r0
    135c:	91 1d       	adc	r25, r1
    135e:	a3 9f       	mul	r26, r19
    1360:	90 0d       	add	r25, r0
    1362:	b2 9f       	mul	r27, r18
    1364:	90 0d       	add	r25, r0
    1366:	11 24       	eor	r1, r1
    1368:	08 95       	ret

0000136a <__divmodhi4>:
    136a:	97 fb       	bst	r25, 7
    136c:	07 2e       	mov	r0, r23
    136e:	16 f4       	brtc	.+4      	; 0x1374 <__divmodhi4+0xa>
    1370:	00 94       	com	r0
    1372:	06 d0       	rcall	.+12     	; 0x1380 <__divmodhi4_neg1>
    1374:	77 fd       	sbrc	r23, 7
    1376:	08 d0       	rcall	.+16     	; 0x1388 <__divmodhi4_neg2>
    1378:	53 d0       	rcall	.+166    	; 0x1420 <__udivmodhi4>
    137a:	07 fc       	sbrc	r0, 7
    137c:	05 d0       	rcall	.+10     	; 0x1388 <__divmodhi4_neg2>
    137e:	3e f4       	brtc	.+14     	; 0x138e <__divmodhi4_exit>

00001380 <__divmodhi4_neg1>:
    1380:	90 95       	com	r25
    1382:	81 95       	neg	r24
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__divmodhi4_neg2>:
    1388:	70 95       	com	r23
    138a:	61 95       	neg	r22
    138c:	7f 4f       	sbci	r23, 0xFF	; 255

0000138e <__divmodhi4_exit>:
    138e:	08 95       	ret

00001390 <__udivmodsi4>:
    1390:	a1 e2       	ldi	r26, 0x21	; 33
    1392:	1a 2e       	mov	r1, r26
    1394:	aa 1b       	sub	r26, r26
    1396:	bb 1b       	sub	r27, r27
    1398:	fd 01       	movw	r30, r26
    139a:	0d c0       	rjmp	.+26     	; 0x13b6 <__udivmodsi4_ep>

0000139c <__udivmodsi4_loop>:
    139c:	aa 1f       	adc	r26, r26
    139e:	bb 1f       	adc	r27, r27
    13a0:	ee 1f       	adc	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	a2 17       	cp	r26, r18
    13a6:	b3 07       	cpc	r27, r19
    13a8:	e4 07       	cpc	r30, r20
    13aa:	f5 07       	cpc	r31, r21
    13ac:	20 f0       	brcs	.+8      	; 0x13b6 <__udivmodsi4_ep>
    13ae:	a2 1b       	sub	r26, r18
    13b0:	b3 0b       	sbc	r27, r19
    13b2:	e4 0b       	sbc	r30, r20
    13b4:	f5 0b       	sbc	r31, r21

000013b6 <__udivmodsi4_ep>:
    13b6:	66 1f       	adc	r22, r22
    13b8:	77 1f       	adc	r23, r23
    13ba:	88 1f       	adc	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	1a 94       	dec	r1
    13c0:	69 f7       	brne	.-38     	; 0x139c <__udivmodsi4_loop>
    13c2:	60 95       	com	r22
    13c4:	70 95       	com	r23
    13c6:	80 95       	com	r24
    13c8:	90 95       	com	r25
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	bd 01       	movw	r22, r26
    13d0:	cf 01       	movw	r24, r30
    13d2:	08 95       	ret

000013d4 <__divmodsi4>:
    13d4:	05 2e       	mov	r0, r21
    13d6:	97 fb       	bst	r25, 7
    13d8:	16 f4       	brtc	.+4      	; 0x13de <__divmodsi4+0xa>
    13da:	00 94       	com	r0
    13dc:	0f d0       	rcall	.+30     	; 0x13fc <__negsi2>
    13de:	57 fd       	sbrc	r21, 7
    13e0:	05 d0       	rcall	.+10     	; 0x13ec <__divmodsi4_neg2>
    13e2:	d6 df       	rcall	.-84     	; 0x1390 <__udivmodsi4>
    13e4:	07 fc       	sbrc	r0, 7
    13e6:	02 d0       	rcall	.+4      	; 0x13ec <__divmodsi4_neg2>
    13e8:	46 f4       	brtc	.+16     	; 0x13fa <__divmodsi4_exit>
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <__negsi2>

000013ec <__divmodsi4_neg2>:
    13ec:	50 95       	com	r21
    13ee:	40 95       	com	r20
    13f0:	30 95       	com	r19
    13f2:	21 95       	neg	r18
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	4f 4f       	sbci	r20, 0xFF	; 255
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255

000013fa <__divmodsi4_exit>:
    13fa:	08 95       	ret

000013fc <__negsi2>:
    13fc:	90 95       	com	r25
    13fe:	80 95       	com	r24
    1400:	70 95       	com	r23
    1402:	61 95       	neg	r22
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__muluhisi3>:
    140c:	1d d0       	rcall	.+58     	; 0x1448 <__umulhisi3>
    140e:	a5 9f       	mul	r26, r21
    1410:	90 0d       	add	r25, r0
    1412:	b4 9f       	mul	r27, r20
    1414:	90 0d       	add	r25, r0
    1416:	a4 9f       	mul	r26, r20
    1418:	80 0d       	add	r24, r0
    141a:	91 1d       	adc	r25, r1
    141c:	11 24       	eor	r1, r1
    141e:	08 95       	ret

00001420 <__udivmodhi4>:
    1420:	aa 1b       	sub	r26, r26
    1422:	bb 1b       	sub	r27, r27
    1424:	51 e1       	ldi	r21, 0x11	; 17
    1426:	07 c0       	rjmp	.+14     	; 0x1436 <__udivmodhi4_ep>

00001428 <__udivmodhi4_loop>:
    1428:	aa 1f       	adc	r26, r26
    142a:	bb 1f       	adc	r27, r27
    142c:	a6 17       	cp	r26, r22
    142e:	b7 07       	cpc	r27, r23
    1430:	10 f0       	brcs	.+4      	; 0x1436 <__udivmodhi4_ep>
    1432:	a6 1b       	sub	r26, r22
    1434:	b7 0b       	sbc	r27, r23

00001436 <__udivmodhi4_ep>:
    1436:	88 1f       	adc	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	5a 95       	dec	r21
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__udivmodhi4_loop>
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	bc 01       	movw	r22, r24
    1444:	cd 01       	movw	r24, r26
    1446:	08 95       	ret

00001448 <__umulhisi3>:
    1448:	a2 9f       	mul	r26, r18
    144a:	b0 01       	movw	r22, r0
    144c:	b3 9f       	mul	r27, r19
    144e:	c0 01       	movw	r24, r0
    1450:	a3 9f       	mul	r26, r19
    1452:	01 d0       	rcall	.+2      	; 0x1456 <__umulhisi3+0xe>
    1454:	b2 9f       	mul	r27, r18
    1456:	70 0d       	add	r23, r0
    1458:	81 1d       	adc	r24, r1
    145a:	11 24       	eor	r1, r1
    145c:	91 1d       	adc	r25, r1
    145e:	08 95       	ret

00001460 <_exit>:
    1460:	f8 94       	cli

00001462 <__stop_program>:
    1462:	ff cf       	rjmp	.-2      	; 0x1462 <__stop_program>
