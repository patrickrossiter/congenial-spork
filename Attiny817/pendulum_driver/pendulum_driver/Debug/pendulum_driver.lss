
pendulum_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fc  00803e00  00803e00  000006e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00000750  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f4e  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002288  00000000  00000000  000059ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000173a  00000000  00000000  00007c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  000093b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002382  00000000  00000000  000099f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000768  00000000  00000000  0000bd72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000c4da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	7d c2       	rjmp	.+1274   	; 0x50c <__vector_8>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	38 c1       	rjmp	.+624    	; 0x286 <__vector_10>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	9d c1       	rjmp	.+826    	; 0x356 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	92 c2       	rjmp	.+1316   	; 0x550 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	aa c1       	rjmp	.+852    	; 0x384 <__vector_23>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	ee e6       	ldi	r30, 0x6E	; 110
  48:	f6 e0       	ldi	r31, 0x06	; 6
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 3f       	cpi	r26, 0xFC	; 252
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	8c d0       	rcall	.+280    	; 0x180 <main>
  68:	00 c3       	rjmp	.+1536   	; 0x66a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
  6c:	39 d2       	rcall	.+1138   	; 0x4e0 <system_init>
  6e:	08 95       	ret

00000070 <get_rotor_position>:
	I2C_WriteRegister(MMA8451_ADDR, CTRL_REG1, 0x3D);				// ODR = 1.56Hz, Reduced noise, Active mode
	//
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG3, 0x00);				// Push-pull, active low interrupt
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG4, 0x01);				// Enable DRDY interrupt
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG5, 0x01);				// DRDY interrupt routed to INT1 - PTA14
    I2C_WriteRegister(MMA8451_ADDR, CTRL_REG1, 0x0D);				// ODR = 400 Hz, Reduced noise, Active mode 
  70:	cf 92       	push	r12
  72:	df 92       	push	r13
  74:	ef 92       	push	r14
  76:	ff 92       	push	r15
  78:	cf 93       	push	r28
  7a:	df 93       	push	r29
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
  82:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7f860b>
  86:	80 ff       	sbrs	r24, 0
  88:	fc cf       	rjmp	.-8      	; 0x82 <__EEPROM_REGION_LENGTH__+0x2>
  8a:	c0 e0       	ldi	r28, 0x00	; 0
  8c:	d6 e0       	ldi	r29, 0x06	; 6
  8e:	28 89       	ldd	r18, Y+16	; 0x10
  90:	39 89       	ldd	r19, Y+17	; 0x11
  92:	a8 e6       	ldi	r26, 0x68	; 104
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	dd d2       	rcall	.+1466   	; 0x652 <__umulhisi3>
  98:	29 ef       	ldi	r18, 0xF9	; 249
  9a:	33 e0       	ldi	r19, 0x03	; 3
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	b6 d2       	rcall	.+1388   	; 0x60e <__udivmodsi4>
  a2:	88 89       	ldd	r24, Y+16	; 0x10
  a4:	99 89       	ldd	r25, Y+17	; 0x11
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	c0 90 c2 3f 	lds	r12, 0x3FC2	; 0x803fc2 <max_angle>
  ae:	d0 90 c3 3f 	lds	r13, 0x3FC3	; 0x803fc3 <max_angle+0x1>
  b2:	e0 90 c4 3f 	lds	r14, 0x3FC4	; 0x803fc4 <max_angle+0x2>
  b6:	f0 90 c5 3f 	lds	r15, 0x3FC5	; 0x803fc5 <max_angle+0x3>
  ba:	c8 16       	cp	r12, r24
  bc:	d9 06       	cpc	r13, r25
  be:	ea 06       	cpc	r14, r26
  c0:	fb 06       	cpc	r15, r27
  c2:	70 f4       	brcc	.+28     	; 0xe0 <__EEPROM_REGION_LENGTH__+0x60>
  c4:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__RODATA_PM_OFFSET__+0x7f8610>
  c8:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__RODATA_PM_OFFSET__+0x7f8611>
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	80 93 c2 3f 	sts	0x3FC2, r24	; 0x803fc2 <max_angle>
  d4:	90 93 c3 3f 	sts	0x3FC3, r25	; 0x803fc3 <max_angle+0x1>
  d8:	a0 93 c4 3f 	sts	0x3FC4, r26	; 0x803fc4 <max_angle+0x2>
  dc:	b0 93 c5 3f 	sts	0x3FC5, r27	; 0x803fc5 <max_angle+0x3>
  e0:	ca 01       	movw	r24, r20
  e2:	b9 01       	movw	r22, r18
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	ff 90       	pop	r15
  ea:	ef 90       	pop	r14
  ec:	df 90       	pop	r13
  ee:	cf 90       	pop	r12
  f0:	08 95       	ret

000000f2 <ADC_setup>:
  f2:	e0 ea       	ldi	r30, 0xA0	; 160
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	80 83       	st	Z, r24
  fc:	81 81       	ldd	r24, Z+1	; 0x01
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	81 83       	std	Z+1, r24	; 0x01
 102:	a0 e8       	ldi	r26, 0x80	; 128
 104:	b6 e0       	ldi	r27, 0x06	; 6
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	8c 93       	st	X, r24
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	11 96       	adiw	r26, 0x01	; 1
 10e:	8c 93       	st	X, r24
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <__RODATA_PM_OFFSET__+0x7f8402>
 116:	80 81       	ld	r24, Z
 118:	80 63       	ori	r24, 0x30	; 48
 11a:	80 83       	st	Z, r24
 11c:	81 81       	ldd	r24, Z+1	; 0x01
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	81 83       	std	Z+1, r24	; 0x01
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f6 e0       	ldi	r31, 0x06	; 6
 126:	80 81       	ld	r24, Z
 128:	80 83       	st	Z, r24
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
 130:	82 81       	ldd	r24, Z+2	; 0x02
 132:	83 65       	ori	r24, 0x53	; 83
 134:	82 83       	std	Z+2, r24	; 0x02
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	86 8b       	std	Z+22, r24	; 0x16
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	86 83       	std	Z+6, r24	; 0x06
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
 144:	08 95       	ret

00000146 <TCA_setup>:
}
//

void TCA_setup(void) {
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_ENABLE_bm | TCA_SINGLE_CLKSEL_DIV4_gc);
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	fa e0       	ldi	r31, 0x0A	; 10
 14a:	80 81       	ld	r24, Z
 14c:	85 60       	ori	r24, 0x05	; 5
 14e:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_WGMODE_FRQ_gc | TCA_SINGLE_CMP0EN_bm;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	81 61       	ori	r24, 0x11	; 17
 154:	81 83       	std	Z+1, r24	; 0x01
	TCA0.SINGLE.PER = TCA0_PERIOD;
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	86 a3       	std	Z+38, r24	; 0x26
 15c:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.INTCTRL |= TCA_SINGLE_CMP0_bm;
 15e:	82 85       	ldd	r24, Z+10	; 0x0a
 160:	80 61       	ori	r24, 0x10	; 16
 162:	82 87       	std	Z+10, r24	; 0x0a
 164:	08 95       	ret

00000166 <TCB_setup>:
}
//
void TCB_setup(void) {
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_CLKTCA_gc;
 166:	e0 e4       	ldi	r30, 0x40	; 64
 168:	fa e0       	ldi	r31, 0x0A	; 10
 16a:	80 81       	ld	r24, Z
 16c:	85 60       	ori	r24, 0x05	; 5
 16e:	80 83       	st	Z, r24
	TCB0.INTCTRL |= TCB_CAPT_bm;
 170:	85 81       	ldd	r24, Z+5	; 0x05
 172:	81 60       	ori	r24, 0x01	; 1
 174:	85 83       	std	Z+5, r24	; 0x05
	TCB0.CCMP = F_TCA / F_CALC;
 176:	88 ea       	ldi	r24, 0xA8	; 168
 178:	91 e6       	ldi	r25, 0x61	; 97
 17a:	84 87       	std	Z+12, r24	; 0x0c
 17c:	95 87       	std	Z+13, r25	; 0x0d
 17e:	08 95       	ret

00000180 <main>:
PB2 not working?
Timing indicator = PB3
*/
int main(void) {
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 180:	75 df       	rcall	.-278    	; 0x6c <atmel_start_init>
	// 
	PORTB.DIRSET |= (PIN5_bm | PIN3_bm | PIN1_bm | PIN0_bm);
 182:	e0 e2       	ldi	r30, 0x20	; 32
 184:	f4 e0       	ldi	r31, 0x04	; 4
 186:	81 81       	ldd	r24, Z+1	; 0x01
 188:	8b 62       	ori	r24, 0x2B	; 43
 18a:	81 83       	std	Z+1, r24	; 0x01
	// 
	// Setup buttons as inputs to change position set point
	// Timer 1 to frequency generation mode
	TCA_setup();	
 18c:	dc df       	rcall	.-72     	; 0x146 <TCA_setup>
	// Timer 2 to trigger position calculation every x milliseconds
	TCB_setup();
 18e:	eb df       	rcall	.-42     	; 0x166 <TCB_setup>
	// ADC for angle position detection
	ADC_setup();
 190:	b0 df       	rcall	.-160    	; 0xf2 <ADC_setup>
	sei();
 192:	78 94       	sei
	speed_command = 4500;
 194:	84 e9       	ldi	r24, 0x94	; 148
 196:	91 e1       	ldi	r25, 0x11	; 17
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <speed_command>
 1a0:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <speed_command+0x1>
 1a4:	a0 93 0e 3e 	sts	0x3E0E, r26	; 0x803e0e <speed_command+0x2>
 1a8:	b0 93 0f 3e 	sts	0x3E0F, r27	; 0x803e0f <speed_command+0x3>
	int rotorReference = 194;
	int deadband = 2;
	while (1) {
		if (loop) {
 1ac:	80 91 10 3e 	lds	r24, 0x3E10	; 0x803e10 <loop>
 1b0:	90 91 11 3e 	lds	r25, 0x3E11	; 0x803e11 <loop+0x1>
 1b4:	89 2b       	or	r24, r25
 1b6:	d1 f3       	breq	.-12     	; 0x1ac <main+0x2c>
			PORTB.OUTSET = PIN5_bm;
 1b8:	80 e2       	ldi	r24, 0x20	; 32
 1ba:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
			
			rotorAngle = get_rotor_position();
 1be:	58 df       	rcall	.-336    	; 0x70 <get_rotor_position>
 1c0:	60 93 b6 3f 	sts	0x3FB6, r22	; 0x803fb6 <rotorAngle>
 1c4:	70 93 b7 3f 	sts	0x3FB7, r23	; 0x803fb7 <rotorAngle+0x1>
 1c8:	80 93 b8 3f 	sts	0x3FB8, r24	; 0x803fb8 <rotorAngle+0x2>
 1cc:	90 93 b9 3f 	sts	0x3FB9, r25	; 0x803fb9 <rotorAngle+0x3>
			// int32_t pidOutput = pid_Controller(rotorReference, rotorAngle, &pidData);
			// Simple bang-bang stabiliser for non-inverted pendulum
			if (rotorAngle > (rotorReference+deadband)){
 1d0:	65 3c       	cpi	r22, 0xC5	; 197
 1d2:	71 05       	cpc	r23, r1
 1d4:	81 05       	cpc	r24, r1
 1d6:	91 05       	cpc	r25, r1
 1d8:	c8 f0       	brcs	.+50     	; 0x20c <__DATA_REGION_LENGTH__+0xc>
				direction = 1;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	a0 e0       	ldi	r26, 0x00	; 0
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	80 93 ba 3f 	sts	0x3FBA, r24	; 0x803fba <direction>
 1e6:	90 93 bb 3f 	sts	0x3FBB, r25	; 0x803fbb <direction+0x1>
 1ea:	a0 93 bc 3f 	sts	0x3FBC, r26	; 0x803fbc <direction+0x2>
 1ee:	b0 93 bd 3f 	sts	0x3FBD, r27	; 0x803fbd <direction+0x3>
				speed_command = 4900;
 1f2:	84 e2       	ldi	r24, 0x24	; 36
 1f4:	93 e1       	ldi	r25, 0x13	; 19
 1f6:	a0 e0       	ldi	r26, 0x00	; 0
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <speed_command>
 1fe:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <speed_command+0x1>
 202:	a0 93 0e 3e 	sts	0x3E0E, r26	; 0x803e0e <speed_command+0x2>
 206:	b0 93 0f 3e 	sts	0x3E0F, r27	; 0x803e0f <speed_command+0x3>
 20a:	22 c0       	rjmp	.+68     	; 0x250 <__DATA_REGION_LENGTH__+0x50>
			}
			else if (rotorAngle < (rotorReference-deadband)){
 20c:	60 3c       	cpi	r22, 0xC0	; 192
 20e:	71 05       	cpc	r23, r1
 210:	81 05       	cpc	r24, r1
 212:	91 05       	cpc	r25, r1
 214:	a8 f4       	brcc	.+42     	; 0x240 <__DATA_REGION_LENGTH__+0x40>
				direction = 0;
 216:	10 92 ba 3f 	sts	0x3FBA, r1	; 0x803fba <direction>
 21a:	10 92 bb 3f 	sts	0x3FBB, r1	; 0x803fbb <direction+0x1>
 21e:	10 92 bc 3f 	sts	0x3FBC, r1	; 0x803fbc <direction+0x2>
 222:	10 92 bd 3f 	sts	0x3FBD, r1	; 0x803fbd <direction+0x3>
				speed_command = 4900;				
 226:	84 e2       	ldi	r24, 0x24	; 36
 228:	93 e1       	ldi	r25, 0x13	; 19
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	80 93 0c 3e 	sts	0x3E0C, r24	; 0x803e0c <speed_command>
 232:	90 93 0d 3e 	sts	0x3E0D, r25	; 0x803e0d <speed_command+0x1>
 236:	a0 93 0e 3e 	sts	0x3E0E, r26	; 0x803e0e <speed_command+0x2>
 23a:	b0 93 0f 3e 	sts	0x3E0F, r27	; 0x803e0f <speed_command+0x3>
 23e:	08 c0       	rjmp	.+16     	; 0x250 <__DATA_REGION_LENGTH__+0x50>
			}
			else {
				speed_command = 0;
 240:	10 92 0c 3e 	sts	0x3E0C, r1	; 0x803e0c <speed_command>
 244:	10 92 0d 3e 	sts	0x3E0D, r1	; 0x803e0d <speed_command+0x1>
 248:	10 92 0e 3e 	sts	0x3E0E, r1	; 0x803e0e <speed_command+0x2>
 24c:	10 92 0f 3e 	sts	0x3E0F, r1	; 0x803e0f <speed_command+0x3>
			}
			loop_counter++;
 250:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 254:	90 91 01 3e 	lds	r25, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 258:	a0 91 02 3e 	lds	r26, 0x3E02	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 25c:	b0 91 03 3e 	lds	r27, 0x3E03	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
 26a:	90 93 01 3e 	sts	0x3E01, r25	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
 26e:	a0 93 02 3e 	sts	0x3E02, r26	; 0x803e02 <__DATA_REGION_ORIGIN__+0x2>
 272:	b0 93 03 3e 	sts	0x3E03, r27	; 0x803e03 <__DATA_REGION_ORIGIN__+0x3>
			
			PORTB.OUTCLR = PIN5_bm;
 276:	80 e2       	ldi	r24, 0x20	; 32
 278:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
			loop = 0;
 27c:	10 92 10 3e 	sts	0x3E10, r1	; 0x803e10 <loop>
 280:	10 92 11 3e 	sts	0x3E11, r1	; 0x803e11 <loop+0x1>
 284:	93 cf       	rjmp	.-218    	; 0x1ac <main+0x2c>

00000286 <__vector_10>:
	TCB0.CTRLA |= TCB_ENABLE_bm | TCB_CLKSEL_CLKTCA_gc;
	TCB0.INTCTRL |= TCB_CAPT_bm;
	TCB0.CCMP = F_TCA / F_CALC;
}
//
ISR(TCA0_CMP0_vect) {
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
 2a4:	e0 e0       	ldi	r30, 0x00	; 0
 2a6:	fa e0       	ldi	r31, 0x0A	; 10
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	83 87       	std	Z+11, r24	; 0x0b

	TCA0.SINGLE.CMP0 = speed_command;
 2ac:	80 91 0c 3e 	lds	r24, 0x3E0C	; 0x803e0c <speed_command>
 2b0:	90 91 0d 3e 	lds	r25, 0x3E0D	; 0x803e0d <speed_command+0x1>
 2b4:	80 a7       	std	Z+40, r24	; 0x28
 2b6:	91 a7       	std	Z+41, r25	; 0x29
	if (direction != prev_dir) {
 2b8:	40 91 ba 3f 	lds	r20, 0x3FBA	; 0x803fba <direction>
 2bc:	50 91 bb 3f 	lds	r21, 0x3FBB	; 0x803fbb <direction+0x1>
 2c0:	60 91 bc 3f 	lds	r22, 0x3FBC	; 0x803fbc <direction+0x2>
 2c4:	70 91 bd 3f 	lds	r23, 0x3FBD	; 0x803fbd <direction+0x3>
 2c8:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <prev_dir>
 2cc:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <prev_dir+0x1>
 2d0:	a0 91 18 3e 	lds	r26, 0x3E18	; 0x803e18 <prev_dir+0x2>
 2d4:	b0 91 19 3e 	lds	r27, 0x3E19	; 0x803e19 <prev_dir+0x3>
 2d8:	48 17       	cp	r20, r24
 2da:	59 07       	cpc	r21, r25
 2dc:	6a 07       	cpc	r22, r26
 2de:	7b 07       	cpc	r23, r27
 2e0:	d9 f0       	breq	.+54     	; 0x318 <__vector_10+0x92>
		// Stop PWM
		TCA0.SINGLE.CTRLA &= ~TCA_SINGLE_ENABLE_bm;
 2e2:	80 81       	ld	r24, Z
 2e4:	8e 7f       	andi	r24, 0xFE	; 254
 2e6:	80 83       	st	Z, r24
		// Change PB01 to value of direction
		if (direction) PORTB.OUTSET = PIN1_bm;
 2e8:	80 91 ba 3f 	lds	r24, 0x3FBA	; 0x803fba <direction>
 2ec:	90 91 bb 3f 	lds	r25, 0x3FBB	; 0x803fbb <direction+0x1>
 2f0:	a0 91 bc 3f 	lds	r26, 0x3FBC	; 0x803fbc <direction+0x2>
 2f4:	b0 91 bd 3f 	lds	r27, 0x3FBD	; 0x803fbd <direction+0x3>
 2f8:	89 2b       	or	r24, r25
 2fa:	8a 2b       	or	r24, r26
 2fc:	8b 2b       	or	r24, r27
 2fe:	21 f0       	breq	.+8      	; 0x308 <__vector_10+0x82>
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>
 306:	03 c0       	rjmp	.+6      	; 0x30e <__vector_10+0x88>
		else PORTB.OUTCLR = PIN1_bm;
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
		// Restart PWM
		TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	fa e0       	ldi	r31, 0x0A	; 10
 312:	80 81       	ld	r24, Z
 314:	81 60       	ori	r24, 0x01	; 1
 316:	80 83       	st	Z, r24
	}
	prev_dir = direction;
 318:	80 91 ba 3f 	lds	r24, 0x3FBA	; 0x803fba <direction>
 31c:	90 91 bb 3f 	lds	r25, 0x3FBB	; 0x803fbb <direction+0x1>
 320:	a0 91 bc 3f 	lds	r26, 0x3FBC	; 0x803fbc <direction+0x2>
 324:	b0 91 bd 3f 	lds	r27, 0x3FBD	; 0x803fbd <direction+0x3>
 328:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <prev_dir>
 32c:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <prev_dir+0x1>
 330:	a0 93 18 3e 	sts	0x3E18, r26	; 0x803e18 <prev_dir+0x2>
 334:	b0 93 19 3e 	sts	0x3E19, r27	; 0x803e19 <prev_dir+0x3>
}
 338:	ff 91       	pop	r31
 33a:	ef 91       	pop	r30
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	7f 91       	pop	r23
 346:	6f 91       	pop	r22
 348:	5f 91       	pop	r21
 34a:	4f 91       	pop	r20
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_13>:
//
ISR(TCB0_INT_vect) {
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	8f 93       	push	r24
 362:	9f 93       	push	r25
	TCB0.INTFLAGS = TCB_CAPT_bm;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <__RODATA_PM_OFFSET__+0x7f8a46>
	loop = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	80 93 10 3e 	sts	0x3E10, r24	; 0x803e10 <loop>
 372:	90 93 11 3e 	sts	0x3E11, r25	; 0x803e11 <loop+0x1>
}
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__vector_23>:
//
ISR(USART0_DRE_vect) {
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	4f 93       	push	r20
 390:	5f 93       	push	r21
 392:	6f 93       	push	r22
 394:	7f 93       	push	r23
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	PORTB.OUTSET = PIN5_bm;
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__RODATA_PM_OFFSET__+0x7f8425>

	usart_idx++;
 3a8:	40 91 c6 3f 	lds	r20, 0x3FC6	; 0x803fc6 <usart_idx>
 3ac:	50 91 c7 3f 	lds	r21, 0x3FC7	; 0x803fc7 <usart_idx+0x1>
 3b0:	60 91 c8 3f 	lds	r22, 0x3FC8	; 0x803fc8 <usart_idx+0x2>
 3b4:	70 91 c9 3f 	lds	r23, 0x3FC9	; 0x803fc9 <usart_idx+0x3>
 3b8:	4f 5f       	subi	r20, 0xFF	; 255
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255
 3bc:	6f 4f       	sbci	r22, 0xFF	; 255
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	40 93 c6 3f 	sts	0x3FC6, r20	; 0x803fc6 <usart_idx>
 3c4:	50 93 c7 3f 	sts	0x3FC7, r21	; 0x803fc7 <usart_idx+0x1>
 3c8:	60 93 c8 3f 	sts	0x3FC8, r22	; 0x803fc8 <usart_idx+0x2>
 3cc:	70 93 c9 3f 	sts	0x3FC9, r23	; 0x803fc9 <usart_idx+0x3>
	if (usart_idx == usart_send_length) USART0.CTRLA &= ~USART_DREIE_bm;
 3d0:	80 91 be 3f 	lds	r24, 0x3FBE	; 0x803fbe <usart_send_length>
 3d4:	90 91 bf 3f 	lds	r25, 0x3FBF	; 0x803fbf <usart_send_length+0x1>
 3d8:	a0 91 c0 3f 	lds	r26, 0x3FC0	; 0x803fc0 <usart_send_length+0x2>
 3dc:	b0 91 c1 3f 	lds	r27, 0x3FC1	; 0x803fc1 <usart_send_length+0x3>
 3e0:	48 17       	cp	r20, r24
 3e2:	59 07       	cpc	r21, r25
 3e4:	6a 07       	cpc	r22, r26
 3e6:	7b 07       	cpc	r23, r27
 3e8:	29 f4       	brne	.+10     	; 0x3f4 <__vector_23+0x70>
 3ea:	e0 e0       	ldi	r30, 0x00	; 0
 3ec:	f8 e0       	ldi	r31, 0x08	; 8
 3ee:	85 81       	ldd	r24, Z+5	; 0x05
 3f0:	8f 7d       	andi	r24, 0xDF	; 223
 3f2:	85 83       	std	Z+5, r24	; 0x05
	while(!(USART0.STATUS & USART_DREIF_bm));
 3f4:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 3f8:	85 ff       	sbrs	r24, 5
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <__vector_23+0x70>
	USART0.TXDATAL = usart_send_buffer[usart_idx];
 3fc:	fa 01       	movw	r30, r20
 3fe:	ee 5e       	subi	r30, 0xEE	; 238
 400:	f1 4c       	sbci	r31, 0xC1	; 193
 402:	80 81       	ld	r24, Z
 404:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>

	PORTB.OUTCLR = PIN5_bm;
 408:	80 e2       	ldi	r24, 0x20	; 32
 40a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__RODATA_PM_OFFSET__+0x7f8426>
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	0f 90       	pop	r0
 424:	0f be       	out	0x3f, r0	; 63
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <BOD_init>:
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret

00000430 <CLKCTRL_init>:
 430:	40 e1       	ldi	r20, 0x10	; 16
 432:	68 ed       	ldi	r22, 0xD8	; 216
 434:	81 e6       	ldi	r24, 0x61	; 97
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	5d d0       	rcall	.+186    	; 0x4f4 <protected_write_io>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	08 95       	ret

0000043e <CPUINT_init>:
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	08 95       	ret

00000442 <mcu_init>:
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 c0       	rjmp	.+16     	; 0x456 <mcu_init+0x14>
 446:	e8 2f       	mov	r30, r24
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	e0 5f       	subi	r30, 0xF0	; 240
 44c:	fb 4f       	sbci	r31, 0xFB	; 251
 44e:	90 81       	ld	r25, Z
 450:	98 60       	ori	r25, 0x08	; 8
 452:	90 83       	st	Z, r25
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	88 30       	cpi	r24, 0x08	; 8
 458:	b0 f3       	brcs	.-20     	; 0x446 <mcu_init+0x4>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 c0       	rjmp	.+16     	; 0x46e <mcu_init+0x2c>
 45e:	e8 2f       	mov	r30, r24
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	e0 5d       	subi	r30, 0xD0	; 208
 464:	fb 4f       	sbci	r31, 0xFB	; 251
 466:	90 81       	ld	r25, Z
 468:	98 60       	ori	r25, 0x08	; 8
 46a:	90 83       	st	Z, r25
 46c:	8f 5f       	subi	r24, 0xFF	; 255
 46e:	88 30       	cpi	r24, 0x08	; 8
 470:	b0 f3       	brcs	.-20     	; 0x45e <mcu_init+0x1c>
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	08 c0       	rjmp	.+16     	; 0x486 <mcu_init+0x44>
 476:	e8 2f       	mov	r30, r24
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	e0 5b       	subi	r30, 0xB0	; 176
 47c:	fb 4f       	sbci	r31, 0xFB	; 251
 47e:	90 81       	ld	r25, Z
 480:	98 60       	ori	r25, 0x08	; 8
 482:	90 83       	st	Z, r25
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	88 30       	cpi	r24, 0x08	; 8
 488:	b0 f3       	brcs	.-20     	; 0x476 <mcu_init+0x34>
 48a:	08 95       	ret

0000048c <USART_0_initialization>:
 48c:	84 b1       	in	r24, 0x04	; 4
 48e:	87 7f       	andi	r24, 0xF7	; 247
 490:	84 b9       	out	0x04, r24	; 4
 492:	e3 e3       	ldi	r30, 0x33	; 51
 494:	f4 e0       	ldi	r31, 0x04	; 4
 496:	80 81       	ld	r24, Z
 498:	87 7f       	andi	r24, 0xF7	; 247
 49a:	80 83       	st	Z, r24
 49c:	84 b1       	in	r24, 0x04	; 4
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	84 b9       	out	0x04, r24	; 4
 4a2:	85 b1       	in	r24, 0x05	; 5
 4a4:	8b 7f       	andi	r24, 0xFB	; 251
 4a6:	85 b9       	out	0x05, r24	; 5
 4a8:	a8 d0       	rcall	.+336    	; 0x5fa <USART_0_init>
 4aa:	08 95       	ret

000004ac <PWM_0_initialization>:
 4ac:	27 d0       	rcall	.+78     	; 0x4fc <PWM_0_init>
 4ae:	08 95       	ret

000004b0 <TIMER_0_initialization>:
 4b0:	a2 d0       	rcall	.+324    	; 0x5f6 <TIMER_0_init>
 4b2:	08 95       	ret

000004b4 <SPI_0_initialization>:
 4b4:	80 b1       	in	r24, 0x00	; 0
 4b6:	8b 7f       	andi	r24, 0xFB	; 251
 4b8:	80 b9       	out	0x00, r24	; 0
 4ba:	e2 e1       	ldi	r30, 0x12	; 18
 4bc:	f4 e0       	ldi	r31, 0x04	; 4
 4be:	80 81       	ld	r24, Z
 4c0:	87 7f       	andi	r24, 0xF7	; 247
 4c2:	80 83       	st	Z, r24
 4c4:	80 b1       	in	r24, 0x00	; 0
 4c6:	82 60       	ori	r24, 0x02	; 2
 4c8:	80 b9       	out	0x00, r24	; 0
 4ca:	81 b1       	in	r24, 0x01	; 1
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	81 b9       	out	0x01, r24	; 1
 4d0:	80 b1       	in	r24, 0x00	; 0
 4d2:	88 60       	ori	r24, 0x08	; 8
 4d4:	80 b9       	out	0x00, r24	; 0
 4d6:	81 b1       	in	r24, 0x01	; 1
 4d8:	87 7f       	andi	r24, 0xF7	; 247
 4da:	81 b9       	out	0x01, r24	; 1
 4dc:	2d d0       	rcall	.+90     	; 0x538 <SPI_0_init>
 4de:	08 95       	ret

000004e0 <system_init>:
 4e0:	b0 df       	rcall	.-160    	; 0x442 <mcu_init>
 4e2:	a6 df       	rcall	.-180    	; 0x430 <CLKCTRL_init>
 4e4:	d3 df       	rcall	.-90     	; 0x48c <USART_0_initialization>
 4e6:	e2 df       	rcall	.-60     	; 0x4ac <PWM_0_initialization>
 4e8:	e3 df       	rcall	.-58     	; 0x4b0 <TIMER_0_initialization>
 4ea:	e4 df       	rcall	.-56     	; 0x4b4 <SPI_0_initialization>
 4ec:	a8 df       	rcall	.-176    	; 0x43e <CPUINT_init>
 4ee:	22 d0       	rcall	.+68     	; 0x534 <SLPCTRL_init>
 4f0:	9d df       	rcall	.-198    	; 0x42c <BOD_init>
 4f2:	08 95       	ret

000004f4 <protected_write_io>:
 4f4:	fc 01       	movw	r30, r24
 4f6:	64 bf       	out	0x34, r22	; 52
 4f8:	40 83       	st	Z, r20
 4fa:	08 95       	ret

000004fc <PWM_0_init>:
 4fc:	e0 e0       	ldi	r30, 0x00	; 0
 4fe:	fa e0       	ldi	r31, 0x0A	; 10
 500:	85 e0       	ldi	r24, 0x05	; 5
 502:	81 83       	std	Z+1, r24	; 0x01
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	80 83       	st	Z, r24
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret

0000050c <__vector_8>:
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	8f 93       	push	r24
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__RODATA_PM_OFFSET__+0x7f8a0b>
 51e:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <callback_count.3348>
 522:	8f 5f       	subi	r24, 0xFF	; 255
 524:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <callback_count.3348>
 528:	8f 91       	pop	r24
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <SLPCTRL_init>:
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	08 95       	ret

00000538 <SPI_0_init>:
 538:	e0 e2       	ldi	r30, 0x20	; 32
 53a:	f8 e0       	ldi	r31, 0x08	; 8
 53c:	81 e2       	ldi	r24, 0x21	; 33
 53e:	80 83       	st	Z, r24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	82 83       	std	Z+2, r24	; 0x02
 544:	e5 e0       	ldi	r30, 0x05	; 5
 546:	fe e3       	ldi	r31, 0x3E	; 62
 548:	10 82       	st	Z, r1
 54a:	15 82       	std	Z+5, r1	; 0x05
 54c:	16 82       	std	Z+6, r1	; 0x06
 54e:	08 95       	ret

00000550 <__vector_21>:
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
 572:	e0 e2       	ldi	r30, 0x20	; 32
 574:	f8 e0       	ldi	r31, 0x08	; 8
 576:	94 81       	ldd	r25, Z+4	; 0x04
 578:	80 e8       	ldi	r24, 0x80	; 128
 57a:	83 83       	std	Z+3, r24	; 0x03
 57c:	80 91 09 3e 	lds	r24, 0x3E09	; 0x803e09 <SPI_0_desc+0x4>
 580:	82 30       	cpi	r24, 0x02	; 2
 582:	29 f0       	breq	.+10     	; 0x58e <__vector_21+0x3e>
 584:	e0 91 06 3e 	lds	r30, 0x3E06	; 0x803e06 <SPI_0_desc+0x1>
 588:	f0 91 07 3e 	lds	r31, 0x3E07	; 0x803e07 <SPI_0_desc+0x2>
 58c:	90 83       	st	Z, r25
 58e:	e5 e0       	ldi	r30, 0x05	; 5
 590:	fe e3       	ldi	r31, 0x3E	; 62
 592:	a1 81       	ldd	r26, Z+1	; 0x01
 594:	b2 81       	ldd	r27, Z+2	; 0x02
 596:	9d 01       	movw	r18, r26
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	3f 4f       	sbci	r19, 0xFF	; 255
 59c:	21 83       	std	Z+1, r18	; 0x01
 59e:	32 83       	std	Z+2, r19	; 0x02
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	19 f0       	breq	.+6      	; 0x5aa <__vector_21+0x5a>
 5a4:	11 96       	adiw	r26, 0x01	; 1
 5a6:	9c 91       	ld	r25, X
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <__vector_21+0x5c>
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	e5 e0       	ldi	r30, 0x05	; 5
 5ae:	fe e3       	ldi	r31, 0x3E	; 62
 5b0:	83 81       	ldd	r24, Z+3	; 0x03
 5b2:	81 50       	subi	r24, 0x01	; 1
 5b4:	83 83       	std	Z+3, r24	; 0x03
 5b6:	88 23       	and	r24, r24
 5b8:	19 f0       	breq	.+6      	; 0x5c0 <__vector_21+0x70>
 5ba:	90 93 24 08 	sts	0x0824, r25	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 5be:	0a c0       	rjmp	.+20     	; 0x5d4 <__vector_21+0x84>
 5c0:	e5 e0       	ldi	r30, 0x05	; 5
 5c2:	fe e3       	ldi	r31, 0x3E	; 62
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	80 83       	st	Z, r24
 5c8:	05 80       	ldd	r0, Z+5	; 0x05
 5ca:	f6 81       	ldd	r31, Z+6	; 0x06
 5cc:	e0 2d       	mov	r30, r0
 5ce:	30 97       	sbiw	r30, 0x00	; 0
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_21+0x84>
 5d2:	09 95       	icall
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <TIMER_0_init>:
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret

000005fa <USART_0_init>:
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f8 e0       	ldi	r31, 0x08	; 8
 5fe:	8d e8       	ldi	r24, 0x8D	; 141
 600:	90 e2       	ldi	r25, 0x20	; 32
 602:	80 87       	std	Z+8, r24	; 0x08
 604:	91 87       	std	Z+9, r25	; 0x09
 606:	80 ec       	ldi	r24, 0xC0	; 192
 608:	86 83       	std	Z+6, r24	; 0x06
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	08 95       	ret

0000060e <__udivmodsi4>:
 60e:	a1 e2       	ldi	r26, 0x21	; 33
 610:	1a 2e       	mov	r1, r26
 612:	aa 1b       	sub	r26, r26
 614:	bb 1b       	sub	r27, r27
 616:	fd 01       	movw	r30, r26
 618:	0d c0       	rjmp	.+26     	; 0x634 <__udivmodsi4_ep>

0000061a <__udivmodsi4_loop>:
 61a:	aa 1f       	adc	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	ee 1f       	adc	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	a2 17       	cp	r26, r18
 624:	b3 07       	cpc	r27, r19
 626:	e4 07       	cpc	r30, r20
 628:	f5 07       	cpc	r31, r21
 62a:	20 f0       	brcs	.+8      	; 0x634 <__udivmodsi4_ep>
 62c:	a2 1b       	sub	r26, r18
 62e:	b3 0b       	sbc	r27, r19
 630:	e4 0b       	sbc	r30, r20
 632:	f5 0b       	sbc	r31, r21

00000634 <__udivmodsi4_ep>:
 634:	66 1f       	adc	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	1a 94       	dec	r1
 63e:	69 f7       	brne	.-38     	; 0x61a <__udivmodsi4_loop>
 640:	60 95       	com	r22
 642:	70 95       	com	r23
 644:	80 95       	com	r24
 646:	90 95       	com	r25
 648:	9b 01       	movw	r18, r22
 64a:	ac 01       	movw	r20, r24
 64c:	bd 01       	movw	r22, r26
 64e:	cf 01       	movw	r24, r30
 650:	08 95       	ret

00000652 <__umulhisi3>:
 652:	a2 9f       	mul	r26, r18
 654:	b0 01       	movw	r22, r0
 656:	b3 9f       	mul	r27, r19
 658:	c0 01       	movw	r24, r0
 65a:	a3 9f       	mul	r26, r19
 65c:	01 d0       	rcall	.+2      	; 0x660 <__umulhisi3+0xe>
 65e:	b2 9f       	mul	r27, r18
 660:	70 0d       	add	r23, r0
 662:	81 1d       	adc	r24, r1
 664:	11 24       	eor	r1, r1
 666:	91 1d       	adc	r25, r1
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
